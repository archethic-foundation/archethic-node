defmodule Archethic.Utils.Regression.Playbook.SmartContract.UcoAth do
  @moduledoc """
  This contract is triggered by oracle transaction
  It tracks the "all-time high" of the UCO price in USD.
  Credits to @aime-risson
  """

  alias Archethic.TransactionChain.TransactionData
  alias Archethic.Utils.Regression.Api
  alias Archethic.Utils.Regression.Playbook.SmartContract

  require Logger

  def play(storage_nonce_pubkey, endpoint) do
    Logger.info("============== CONTRACT: UCO ATH ==============")
    contract_seed = SmartContract.random_seed()

    Api.send_funds_to_seeds(
      %{contract_seed => 10},
      endpoint
    )

    contract_address =
      SmartContract.deploy(
        contract_seed,
        %TransactionData{
          content: Jason.encode!(%{"ucoMaxPrice" => -1}),
          code: contract_code()
        },
        storage_nonce_pubkey,
        endpoint
      )

    # wait for an oracle tx
    Logger.info("Sleeping for 1 oracle tick (60 seconds)")
    Process.sleep(60_000)

    last_tx = Api.get_last_transaction(contract_address, endpoint)

    %{"ucoMaxPrice" => value} = Jason.decode!(last_tx["data"]["content"])

    if value > -1 do
      Logger.info("Smart contract 'uco ath' content has been updated successfully")
      :ok
    else
      Logger.error("Smart contract 'uco ath' content is not as expected: #{value}")
      :error
    end
  end

  defp contract_code() do
    ~s"""
    @version 1

    # GENERATED BY PLAYBOOK

    condition oracle: [
      content: Json.path_match?("$.uco.usd")
    ]

    actions triggered_by: oracle do
      contract_data = Json.parse(contract.content)
      uco_price = Json.path_extract(transaction.content, "$.uco.usd")

      if uco_price > contract_data.ucoMaxPrice do
        Contract.set_content(Json.to_string(ucoMaxPrice: uco_price))
        Contract.set_code("@version 1\ncondition inherit: []")
      end
    end
    """
  end
end
