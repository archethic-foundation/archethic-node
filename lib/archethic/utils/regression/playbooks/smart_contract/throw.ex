defmodule Archethic.Utils.Regression.Playbook.SmartContract.Throw do
  @moduledoc false

  alias Archethic.TransactionChain.TransactionData
  alias Archethic.TransactionChain.TransactionData.Recipient
  alias Archethic.Utils.Regression.Api
  alias Archethic.Utils.Regression.Playbook.SmartContract

  require Logger

  def play(storage_nonce_pubkey, endpoint) do
    Logger.info("============== CONTRACT: THROW ==============")
    contract_seed = SmartContract.random_seed()
    trigger_seed = SmartContract.random_seed()

    Api.send_funds_to_seeds(%{contract_seed => 10, trigger_seed => 10}, endpoint)

    contract_address =
      SmartContract.deploy(
        contract_seed,
        %TransactionData{code: contract_code()},
        storage_nonce_pubkey,
        endpoint
      )

    with :ok <- trigger_valid_tx(trigger_seed, contract_address, endpoint),
         :ok <- trigger_invalid_tx(trigger_seed, contract_address, endpoint),
         :ok <- call_valid_function(contract_address, endpoint) do
      call_invalid_function(contract_address, endpoint)
    end
  end

  defp trigger_valid_tx(trigger_seed, contract_address, endpoint) do
    case SmartContract.trigger(trigger_seed, contract_address, endpoint,
           recipients: [
             %Recipient{address: contract_address, action: "action", args: ["Hello"]}
           ],
           wait: true
         ) do
      {:ok, _} ->
        last_tx = Api.get_last_transaction(contract_address, endpoint)

        case last_tx["data"]["content"] do
          "World" ->
            Logger.info("Smart contract 'throw' content has been updated successfully")
            :ok

          content ->
            Logger.error("Smart contract 'throw' content is not as expected: #{content}")

            :error
        end

      {:error, _} ->
        Logger.error("Trigger tx on smart contract throw has failed")
        :error
    end
  end

  defp trigger_invalid_tx(trigger_seed, contract_address, endpoint) do
    case SmartContract.trigger(trigger_seed, contract_address, endpoint,
           recipients: [
             %Recipient{address: contract_address, action: "action", args: ["Invalid"]}
           ]
         ) do
      {:ok, _} ->
        Logger.error(
          "Trigger tx on smart contract throw successed while it should be refused by condition"
        )

        :error

      {:error, error} ->
        if match?(
             %{
               "code" => -31003,
               "data" => %{
                 "data" => %{
                   "code" => 1,
                   "data" => "Invalid",
                   "message" => "Param should be \"Hello\""
                 },
                 "message" => "Param should be \"Hello\" - L10"
               },
               "message" => "Invalid recipients execution"
             },
             error
           ) do
          Logger.info("Trigger tx on smart contract throw has been refused as expected")
        else
          Logger.error(
            "Trigger tx on smart contract throw has been refused with invalid reason: #{inspect(error)}"
          )
        end
    end
  end

  defp call_valid_function(contract_address, endpoint) do
    case SmartContract.call_function(contract_address, "public", ["Hello"], false, endpoint) do
      {:ok, "World"} ->
        Logger.info("Call valid function returned expected result")
        :ok

      {_, res} ->
        Logger.error("Call valid function returned unexpected response: #{inspect(res)}")
        :error
    end
  end

  defp call_invalid_function(contract_address, endpoint) do
    expected_result = %{
      "code" => 254,
      "message" => "Function execution returned an error",
      "data" => %{
        "code" => 2,
        "message" => "Param should be \"Hello\"",
        "data" => "Holla"
      }
    }

    case SmartContract.call_function(contract_address, "public", ["Holla"], false, endpoint) do
      {:error, ^expected_result} ->
        Logger.info("Call invalid function returned expected result")
        :ok

      {_, res} ->
        Logger.error("Call invalid function returned unexpected response: #{inspect(res)}")
        :error
    end
  end

  defp contract_code() do
    ~s"""
    @version 1

    # GENERATED BY PLAYBOOK

    condition triggered_by: transaction, on: action(param), as: [
      content: (
        if param == "Hello" do
          true
        else
          throw code: 1, message: "Param should be \\"Hello\\"", data: param
        end
      )
    ]

    actions triggered_by: transaction, on: action(_param) do
      Contract.set_content("World")
    end

    export fun public(param) do
      if param == "Hello" do
        "World"
      else
        throw code: 2, message: "Param should be \\"Hello\\"", data: param
      end
    end
    """
  end
end
