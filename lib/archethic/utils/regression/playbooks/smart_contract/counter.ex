defmodule Archethic.Utils.Regression.Playbook.SmartContract.Counter do
  @moduledoc """
  This contract is triggered by transactions
  It starts with content=0 and the number will increment for each transaction received
  """

  alias Archethic.TransactionChain.TransactionData
  alias Archethic.Utils.Regression.Api
  alias Archethic.Utils.Regression.Playbook.SmartContract

  require Logger

  def play(storage_nonce_pubkey, endpoint) do
    contract_seed = SmartContract.random_seed()
    trigger_seed = SmartContract.random_seed()

    Api.send_funds_to_seeds(
      %{
        contract_seed => 10,
        trigger_seed => 10
      },
      endpoint
    )

    contract_address =
      SmartContract.deploy(
        contract_seed,
        %TransactionData{
          content: "0",
          code: contract_code() |> TransactionData.compress_code()
        },
        storage_nonce_pubkey,
        endpoint
      )

    SmartContract.trigger(trigger_seed, contract_address, endpoint, wait: true)
    SmartContract.trigger(trigger_seed, contract_address, endpoint, wait: true)
    SmartContract.trigger(trigger_seed, contract_address, endpoint, wait: true)
    SmartContract.trigger(trigger_seed, contract_address, endpoint, wait: true)

    last_tx = Api.get_last_transaction(contract_address, endpoint)

    case last_tx["data"]["content"] do
      "4" ->
        Logger.info("Smart contract 'counter' content has been incremented successfully")

      content ->
        Logger.error("Smart contract 'counter' content is not as expected: #{content}")
    end
  end

  defp contract_code() do
    ~s"""
    @version 1

    # GENERATED BY PLAYBOOK

    condition transaction: []
    actions triggered_by: transaction do
        count = String.to_number(contract.content) + 1
        Contract.set_content count
    end
    """
  end
end
