defmodule Archethic.Utils.Regression.Playbook.SmartContract.Counter do
  @moduledoc """
  This contract is triggered by transactions
  It starts with content=0 and the number will increment for each transaction received
  """

  alias Archethic.Crypto
  alias Archethic.TransactionChain.TransactionData
  alias Archethic.Utils.Regression.Api
  alias Archethic.Utils.Regression.Playbook.SmartContract

  require Logger

  def play(storage_nonce_pubkey, endpoint) do
    contract_seed = SmartContract.random_seed()

    triggers_seeds = Enum.map(1..100, fn _ -> SmartContract.random_seed() end)

    initial_funds =
      Enum.reduce(triggers_seeds, %{contract_seed => 10}, fn seed, acc ->
        Map.put(acc, seed, 10)
      end)

    Api.send_funds_to_seeds(initial_funds, endpoint)

    genesis_address =
      Crypto.derive_keypair(contract_seed, 0) |> elem(0) |> Crypto.derive_address()

    contract_address =
      SmartContract.deploy(
        contract_seed,
        %TransactionData{
          content: "0",
          code: contract_code()
        },
        storage_nonce_pubkey,
        endpoint
      )

    nb_transactions = 100

    Enum.map(1..nb_transactions, fn i ->
      Task.async(fn ->
        SmartContract.trigger(Enum.at(triggers_seeds, i - 1), contract_address, endpoint,
          await_timeout: 60_000
        )
      end)
    end)
    |> Task.await_many(:infinity)

    await_no_more_calls(genesis_address, endpoint)
    last_tx = Api.get_last_transaction(contract_address, endpoint)

    case last_tx["data"]["content"] |> String.to_integer() do
      ^nb_transactions ->
        Logger.info("Smart contract 'counter' content has been incremented successfully")

      content ->
        Logger.error("Smart contract 'counter' content is not as expected: #{content}")
    end
  end

  defp get_unspent_outputs(contract_address, endpoint) do
    contract_address
    |> Api.get_unspent_outputs(endpoint)
    |> Enum.filter(&(Map.get(&1, "type") == "call"))
  end

  defp await_no_more_calls(contract_address, endpoint) do
    case get_unspent_outputs(contract_address, endpoint) do
      [] ->
        :ok

      calls ->
        Logger.debug("Remaining calls #{length(calls)}")
        Process.sleep(100)
        await_no_more_calls(contract_address, endpoint)
    end
  end

  defp contract_code() do
    ~s"""
    @version 1

    # GENERATED BY PLAYBOOK

    condition transaction: []
    actions triggered_by: transaction do
        count = String.to_number(contract.content) + 1
        Contract.set_content count
    end
    """
  end
end
