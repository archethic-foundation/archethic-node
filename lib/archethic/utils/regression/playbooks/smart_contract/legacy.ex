defmodule Archethic.Utils.Regression.Playbook.SmartContract.Legacy do
  @moduledoc """
  This contract is triggered every minutes(prod) or every seconds(dev)
  It should send 0.1 UCO to the recipient chain every tick
  """

  alias Archethic.Contracts
  alias Archethic.TransactionChain.TransactionData
  alias Archethic.Utils
  alias Archethic.Utils.Regression.Api
  alias Archethic.Utils.Regression.Playbook.SmartContract

  require Logger

  def play(storage_nonce_pubkey, endpoint) do
    seed = SmartContract.random_seed()
    recipient_address = SmartContract.random_address()
    amount_to_send = Utils.to_bigint(0.1)
    ticks_count = 4

    Api.send_funds_to_seeds(%{seed => 10}, endpoint)

    sleep_ms = 200 + ticks_count * Contracts.minimum_trigger_interval()
    close_datetime = DateTime.utc_now() |> DateTime.add(sleep_ms + 500, :millisecond)

    SmartContract.deploy(
      seed,
      %TransactionData{
        code: contract_code(recipient_address, amount_to_send, close_datetime)
      },
      storage_nonce_pubkey,
      endpoint
    )

    # wait some ticks
    Logger.debug("Sleeping for #{ticks_count} ticks (#{div(sleep_ms, 1000)} seconds)")
    Process.sleep(sleep_ms)

    balance = Api.get_uco_balance(recipient_address, endpoint)
    expected_balance = ticks_count * amount_to_send

    case balance do
      ^expected_balance ->
        Logger.info(
          "Smart contract 'legacy' received #{Utils.from_bigint(balance)} UCOs after #{ticks_count} ticks"
        )

      _ ->
        Logger.error(
          "Smart contract 'legacy' received #{Utils.from_bigint(balance)} UCOs after #{ticks_count} ticks"
        )
    end
  end

  defp contract_code(address, amount, datetime) do
    ~s"""
    # GENERATED BY PLAYBOOK

    condition inherit: [
      code: true,
      uco_transfers: true
    ]

    actions triggered_by: datetime, at: #{DateTime.to_unix(datetime)} do
      set_code("condition inherit: []")
    end

    actions triggered_by: interval, at: "* * * * * *" do
      set_type transfer
      add_uco_transfer to: "#{Base.encode16(address)}", amount: #{amount}
    end
    """
  end
end
