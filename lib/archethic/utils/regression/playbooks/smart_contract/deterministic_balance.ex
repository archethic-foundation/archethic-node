defmodule Archethic.Utils.Regression.Playbook.SmartContract.DeterministicBalance do
  @moduledoc """
  This contract is triggered by transactions
  It will log each balance updates for each transaction received
  """

  alias Archethic.Crypto
  alias Archethic.TransactionChain.TransactionData
  alias Archethic.Utils.Regression.Api
  alias Archethic.Utils.Regression.Playbook.SmartContract

  require Logger

  def play(storage_nonce_pubkey, endpoint) do
    contract_seed = SmartContract.random_seed()

    nb_transactions = 1
    triggers_seeds = Enum.map(1..nb_transactions, fn _ -> SmartContract.random_seed() end)

    initial_funds =
      Enum.reduce(triggers_seeds, %{contract_seed => 505}, fn seed, acc ->
        Map.put(acc, seed, 15)
      end)

    Api.send_funds_to_seeds(initial_funds, endpoint)

    genesis_address =
      Crypto.derive_keypair(contract_seed, 0) |> elem(0) |> Crypto.derive_address()

    Logger.info("Contract at #{Base.encode16(genesis_address)}")

    contract_address =
      SmartContract.deploy(
        contract_seed,
        %TransactionData{
          content: "505",
          code: contract_code()
        },
        storage_nonce_pubkey,
        endpoint
      )

    Enum.map(1..nb_transactions, fn i ->
      Task.async(fn ->
        SmartContract.trigger(Enum.at(triggers_seeds, i - 1), contract_address, endpoint,
          await_timeout: 60_000
          # uco_transfers: [%{to: contract_address, amount: Archethic.Utils.to_bigint(10)}]
        )
      end)
    end)
    |> Task.await_many(:infinity)

    await_no_more_calls(genesis_address, endpoint)
    balance = Api.get_uco_balance(contract_address, endpoint) |> Archethic.Utils.from_bigint()

    if balance < 505 - 5 * nb_transactions do
      Logger.info("Smart contract 'deterministic balance' has been decremented successfully")
    else
      Logger.error(
        "Smart contract 'deterministic balance' has not been decremented successfully: #{balance}"
      )
    end
  end

  defp get_unspent_outputs(contract_address, endpoint) do
    contract_address
    |> Api.get_unspent_outputs(endpoint)
    |> Enum.filter(&(Map.get(&1, "type") == "call"))
  end

  defp await_no_more_calls(contract_address, endpoint) do
    case get_unspent_outputs(contract_address, endpoint) do
      [] ->
        :ok

      calls ->
        Logger.debug("Remaining calls #{length(calls)}")
        Process.sleep(100)
        # await_no_more_calls(contract_address, endpoint)
    end
  end

  defp contract_code() do
    ~s"""
    @version 1

    # GENERATED BY PLAYBOOK

    condition inherit: [
      content: (
        previous_balance = String.to_number(previous.content)

        diff = previous_balance - next.balance.uco
        diff > 5.0 && diff < 6.0
      
      ),
      uco_transfers: ["00000000000000000000000000000000000000000000000000000000000000000000": 5]
    ]

    condition transaction: []
    actions triggered_by: transaction do
      Contract.add_uco_transfer to: 0x00000000000000000000000000000000000000000000000000000000000000000000, amount: 5
      Contract.set_content(String.from_number(contract.balance.uco))
    end
    """
  end
end
