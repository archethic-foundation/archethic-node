defmodule Archethic.Utils.Regression.Playbook.SmartContract.Faucet do
  @moduledoc """
  This contract is triggered at a specific date and will transfer some UCOs
  to all callers (only once per chain)
  """

  alias Archethic.TransactionChain.TransactionData
  alias Archethic.Utils
  alias Archethic.Utils.Regression.Api
  alias Archethic.Utils.Regression.Playbook.SmartContract

  require Logger

  def play(storage_nonce_pubkey, endpoint) do
    contract_seed = SmartContract.random_seed()
    trigger1_seed = SmartContract.random_seed()
    trigger2_seed = SmartContract.random_seed()
    trigger3_seed = SmartContract.random_seed()

    faucet_time =
      DateTime.utc_now()
      |> DateTime.add(5)

    Api.send_funds_to_seeds(
      %{
        contract_seed => 1000,
        trigger1_seed => 1,
        trigger2_seed => 1,
        trigger3_seed => 1
      },
      endpoint
    )

    contract_address =
      SmartContract.deploy(
        contract_seed,
        %TransactionData{
          code: contract_code(faucet_time)
        },
        storage_nonce_pubkey,
        endpoint
      )

    _ = SmartContract.trigger(trigger1_seed, contract_address, endpoint)
    trigger1_tx = SmartContract.trigger(trigger1_seed, contract_address, endpoint)
    trigger2_tx = SmartContract.trigger(trigger2_seed, contract_address, endpoint)
    trigger3_tx = SmartContract.trigger(trigger3_seed, contract_address, endpoint)

    # wait for the tick (+ delta)
    sleep_time = DateTime.diff(faucet_time, DateTime.utc_now(), :millisecond) + 500
    Logger.debug("Sleeping for (#{div(sleep_time, 1000)} seconds)")
    Process.sleep(sleep_time)

    faucet_amount = Utils.to_bigint(5)
    inputs1 = Api.get_inputs(trigger1_tx, endpoint)
    inputs2 = Api.get_inputs(trigger2_tx, endpoint)
    inputs3 = Api.get_inputs(trigger3_tx, endpoint)

    if Enum.all?([inputs1, inputs2, inputs3], fn inputs ->
         1 ==
           inputs
           |> Enum.filter(&(&1["amount"] == faucet_amount))
           |> Enum.count()
       end) do
      Logger.info("Smart contract 'faucet' transferred the correct funds")
    else
      Logger.error("Smart contract 'faucet' did not transfer the funds correctly")
    end
  end

  defp contract_code(datetime) do
    ~S"""
    @version 1

    # GENERATED BY PLAYBOOK

    condition inherit: [
      code: true,
      uco_transfers: true,
      content: true
    ]

    actions triggered_by: datetime, at: ##DATETIME## do
      now = Time.now()

      content = ""
      for call in Contract.get_calls() do
        genesis_address = Chain.get_genesis_address(call.address)

        if Regex.extract(content, genesis_address) == "" do
          Contract.add_uco_transfer(to: genesis_address, amount: 5)
          content = "#{content}#{genesis_address},#{now}\n"
        end
      end

      Contract.set_content(content)
      Contract.set_code("@version 1\ncondition inherit: []")
    end
    """
    |> String.replace("##DATETIME##", datetime |> DateTime.to_unix() |> Integer.to_string())
  end
end
