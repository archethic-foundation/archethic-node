defmodule Archethic.P2P.Message.DashboardDataTest do
  @moduledoc false

  alias Archethic.P2P.Message.DashboardData
  alias Archethic.P2P.Message

  use ExUnit.Case
  import ArchethicCase

  test "encode decode empty" do
    msg = %DashboardData{
      buckets: %{}
    }

    assert {^msg, <<>>} =
             msg
             |> Message.encode()
             |> Message.decode()
  end

  test "encode decode" do
    msg = %DashboardData{
      buckets: %{
        ~U[2023-11-23 17:00:00Z] => [{random_address(), 1_000_000_001}],
        ~U[2023-11-23 17:01:00Z] => [
          {random_address(), 1_000_000_002},
          {random_address(), 2_000_000_006}
        ],
        ~U[2023-11-23 17:02:00Z] => [],
        ~U[2023-11-23 17:03:00Z] => [
          {random_address(), 1_000_000_004},
          {random_address(), 2_000_000_008},
          {random_address(), 3_000_000_009}
        ]
      }
    }

    assert {^msg, <<>>} =
             msg
             |> Message.encode()
             |> Message.decode()
  end

  test "serialize the buckets in order ASC" do
    addr1 =
      "00002223BBD4EC3D64AE597696C7D7ADE1CEE65C639D885450AD2D7B75592AC76AFA" |> Base.decode16!()

    addr2 =
      "00002223BBD4EC3D64AE597696C7D7ADE1CEE65C639D885450AD2D7B75592AC76AFB" |> Base.decode16!()

    addr3 =
      "00002223BBD4EC3D64AE597696C7D7ADE1CEE65C639D885450AD2D7B75592AC76AFC" |> Base.decode16!()

    msg = %DashboardData{
      buckets: %{
        ~U[2023-11-23 17:01:00Z] => [{addr1, 1_000_000_002}],
        ~U[2023-11-23 17:00:00Z] => [{addr2, 1_000_000_001}],
        ~U[2023-11-23 17:03:00Z] => [{addr3, 1_000_000_004}],
        ~U[2023-11-23 17:05:00Z] => [{addr1, 1_000_000_001}],
        ~U[2023-11-23 17:06:00Z] => [{addr2, 1_000_000_001}],
        ~U[2023-11-23 17:07:00Z] => [{addr3, 1_000_000_001}],
        ~U[2023-11-23 17:10:00Z] => [{addr1, 1_000_000_001}],
        ~U[2023-11-23 17:09:00Z] => [{addr2, 1_000_000_001}]
      }
    }

    assert <<225, 1, 8, 101, 95, 133, 16, 1, 1, 0, 0, 34, 35, 187, 212, 236, 61, 100, 174, 89,
             118, 150, 199, 215, 173, 225, 206, 230, 92, 99, 157, 136, 84, 80, 173, 45, 123, 117,
             89, 42, 199, 106, 251, 4, 59, 154, 202, 1, 101, 95, 133, 76, 1, 1, 0, 0, 34, 35, 187,
             212, 236, 61, 100, 174, 89, 118, 150, 199, 215, 173, 225, 206, 230, 92, 99, 157, 136,
             84, 80, 173, 45, 123, 117, 89, 42, 199, 106, 250, 4, 59, 154, 202, 2, 101, 95, 133,
             196, 1, 1, 0, 0, 34, 35, 187, 212, 236, 61, 100, 174, 89, 118, 150, 199, 215, 173,
             225, 206, 230, 92, 99, 157, 136, 84, 80, 173, 45, 123, 117, 89, 42, 199, 106, 252, 4,
             59, 154, 202, 4, 101, 95, 134, 60, 1, 1, 0, 0, 34, 35, 187, 212, 236, 61, 100, 174,
             89, 118, 150, 199, 215, 173, 225, 206, 230, 92, 99, 157, 136, 84, 80, 173, 45, 123,
             117, 89, 42, 199, 106, 250, 4, 59, 154, 202, 1, 101, 95, 134, 120, 1, 1, 0, 0, 34,
             35, 187, 212, 236, 61, 100, 174, 89, 118, 150, 199, 215, 173, 225, 206, 230, 92, 99,
             157, 136, 84, 80, 173, 45, 123, 117, 89, 42, 199, 106, 251, 4, 59, 154, 202, 1, 101,
             95, 134, 180, 1, 1, 0, 0, 34, 35, 187, 212, 236, 61, 100, 174, 89, 118, 150, 199,
             215, 173, 225, 206, 230, 92, 99, 157, 136, 84, 80, 173, 45, 123, 117, 89, 42, 199,
             106, 252, 4, 59, 154, 202, 1, 101, 95, 135, 44, 1, 1, 0, 0, 34, 35, 187, 212, 236,
             61, 100, 174, 89, 118, 150, 199, 215, 173, 225, 206, 230, 92, 99, 157, 136, 84, 80,
             173, 45, 123, 117, 89, 42, 199, 106, 251, 4, 59, 154, 202, 1, 101, 95, 135, 104, 1,
             1, 0, 0, 34, 35, 187, 212, 236, 61, 100, 174, 89, 118, 150, 199, 215, 173, 225, 206,
             230, 92, 99, 157, 136, 84, 80, 173, 45, 123, 117, 89, 42, 199, 106, 250, 4, 59, 154,
             202, 1>> = Message.encode(msg)
  end
end
