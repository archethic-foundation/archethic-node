{"1.5.0-rc1",
 [{"1.4.8",
   [{add_module,'Elixir.Archethic.TransactionChain.DBLedger.FileImpl.Supervisor'},
    {add_module,'Elixir.Archethic.TransactionChain.DBLedger.FileImpl'},
    {add_module,'Elixir.Archethic.TransactionChain.DBLedger.Supervisor'},
    {add_module,'Elixir.Archethic.TransactionChain.DBLedger'},
    {update,'Elixir.Archethic.BeaconChain.Supervisor',supervisor},
    {apply,{supervisor, terminate_child, ['Elixir.Archethic.ContractsSupervisor', 'Elixir.Archethic.Contracts.Loader']}},
    {apply,{supervisor, terminate_child, ['Elixir.Archethic.ContractsSupervisor', 'Elixir.Archethic.ContractSupervisor']}},
    {apply,{supervisor, terminate_child, ['Elixir.Archethic.ContractsSupervisor', 'Elixic.Archethic.Contracts.TransactionLookup']}},
    {apply,{supervisor, terminate_child, ['Elixir.Archethic.Supervisor', 'Elixir.Archethic.AccountSupervisor']}},
    {load_module,'Elixir.Archethic.Cldr.Currency',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Cldr.Number.Transliterate',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Contract',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.ActionInterpreter',
                 brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Contracts.Supervisor',supervisor},
    {load_module,'Elixir.Archethic.P2P.Message.SmartContractCallValidation',
                 brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Replication.TransactionPool',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SelfRepair.Supervisor',supervisor},
    {update,'Elixir.Archethic.TransactionChain.Supervisor',supervisor},
    {load_module,'Elixir.ArchethicWeb.API.GraphQL.Schema.Compiled',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.ExplorerRouter',brutal_purge,soft_purge,
                 []},
    {update,'Elixir.Archethic.BeaconChain.SummaryTimer',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.DB.EmbeddedImpl',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.DB',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB.EmbeddedImpl']},
    {load_module,'Elixir.Archethic.P2P.Message.TransactionSummaryMessage',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain.TransactionSummary']},
    {load_module,'Elixir.Archethic.P2P.MessageEnvelop',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.TransactionChain.Transaction.CrossValidationStamp',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.VersionedUnspentOutput',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.VersionedUnspentOutput']},
    {load_module,'Elixir.Archethic.Utils.Regression.Api',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Application',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Reward','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Utils.Regression.Benchmark.P2PMessage.Connection',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P.MessageEnvelop',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Utils.Regression.Playbook.SmartContract.Counter',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils.Regression.Api',
                  'Elixir.Archethic.Utils.Regression.Playbook.SmartContract']},
    {load_module,'Elixir.Archethic.Utils.Regression.Playbook.SmartContract',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils.Regression.Api',
                  'Elixir.Archethic.Utils.Regression.Playbook.SmartContract.Counter']},
    {load_module,'Elixir.Archethic.Utils',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {load_module,'Elixir.Archethic.TransactionChain.TransactionInput',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.ChainImpl',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Reward',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain','Elixir.Archethic.UTXO',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.UTXO.DBLedger.FileImpl',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.DB',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.VersionedUnspentOutput',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Election',
                  'Elixir.Archethic.Mining','Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.VersionedUnspentOutput',
                  'Elixir.Archethic.TransactionChain.TransactionInput']},
    {update,'Elixir.Archethic.BeaconChain.SlotTimer',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.DB','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.BeaconChain.Summary',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain.SlotTimer',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.SelfRepair.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.BeaconChain',
             'Elixir.Archethic.Bootstrap.Sync','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Contracts.Loader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Contracts.Contract',
             'Elixir.Archethic.Contracts.Worker','Elixir.Archethic.Election',
             'Elixir.Archethic.TransactionChain','Elixir.Archethic.UTXO']},
    {load_module,'Elixir.Archethic.Contracts',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Contracts.Loader']},
    {load_module,'Elixir.Archethic.Election',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.P2P.Client.Connection',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P.MessageEnvelop','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.ListenerProtocol',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.P2P.MessageEnvelop',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Mining',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election',
                  'Elixir.Archethic.Mining.DistributedWorkflow',
                  'Elixir.Archethic.Mining.StandaloneWorkflow']},
    {load_module,'Elixir.Archethic.P2P.Message.AddMiningContext',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Mining','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBalance',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.UTXO','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetFirstTransactionAddress',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetNextAddresses',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransactionInputs',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicationError',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Mining','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ValidateTransaction',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.VersionedUnspentOutput']},
    {load_module,'Elixir.Archethic.Replication.TransactionContext',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.BeaconChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain.SlotTimer',
                  'Elixir.Archethic.BeaconChain.SummaryTimer',
                  'Elixir.Archethic.DB','Elixir.Archethic.Election',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Bootstrap.Sync',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.P2P.Message.CrossValidate',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Mining',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.VersionedUnspentOutput',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetUnspentOutputs',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.VersionedUnspentOutput',
                  'Elixir.Archethic.UTXO','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.NotifyLastTransactionAddress',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Mining.SmartContractValidation',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.Mining.TransactionContext',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ValidateSmartContractCall',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Mining',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicatePendingTransactionChain',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.TransactionInput',
                  'Elixir.Archethic.TransactionChain.TransactionSummary',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.API.GraphQL.Schema.Resolver',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.Election','Elixir.Archethic.Mining',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.API.GraphQL.Schema',brutal_purge,
                 soft_purge,
                 ['Elixir.ArchethicWeb.API.GraphQL.Schema.Resolver']},
    {load_module,'Elixir.ArchethicWeb.WebUtils',brutal_purge,soft_purge,
                 ['Elixir.Archethic']},
    {load_module,'Elixir.ArchethicWeb.Explorer.Components.Amount',
                 brutal_purge,soft_purge,
                 ['Elixir.ArchethicWeb.WebUtils']},
    {load_module,'Elixir.ArchethicWeb.Explorer.Components.InputsList',
                 brutal_purge,soft_purge,
                 ['Elixir.ArchethicWeb.WebUtils']},
    {load_module,'Elixir.ArchethicWeb.Explorer.Components.UnspentOutputList',
                 brutal_purge,soft_purge,
                 ['Elixir.ArchethicWeb.WebUtils']},
    {load_module,'Elixir.Archethic.TransactionChain.TransactionSummary',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.TransactionChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB','Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.TransactionChain.TransactionSummary',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Utils.DetectNodeResponsiveness',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Mining','Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.ArchethicWeb.Explorer.TransactionChainLive',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.ArchethicWeb.WebUtils']},
    {load_module,'Elixir.Archethic.UTXO',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.VersionedUnspentOutput']},
    {load_module,'Elixir.ArchethicWeb.API.JsonRPC.Method.EstimateTransactionFee',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Mining',
                  'Elixir.Archethic.Mining.SmartContractValidation',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.ArchethicWeb.Explorer.ExplorerIndexLive',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.DB']},
    {load_module,'Elixir.ArchethicWeb.Explorer.ExplorerView',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain.Summary',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.Explorer.SettingsLive',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Reward',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.ArchethicWeb.Explorer.TransactionDetailsLive',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Reward',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.ArchethicWeb.Explorer.ExplorerView',
                  'Elixir.ArchethicWeb.WebUtils']},
    {load_module,'Elixir.Archethic.Replication.TransactionValidator',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Contracts.Contract','Elixir.Archethic.DB',
                  'Elixir.Archethic.Election','Elixir.Archethic.Mining',
                  'Elixir.Archethic.Mining.SmartContractValidation',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations']},
    {load_module,'Elixir.Archethic.Replication',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Election',
                  'Elixir.Archethic.Replication.TransactionContext',
                  'Elixir.Archethic.Replication.TransactionPool',
                  'Elixir.Archethic.Replication.TransactionValidator',
                  'Elixir.Archethic.Reward',
                  'Elixir.Archethic.TransactionChain','Elixir.Archethic.UTXO',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.SelfRepair',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Election',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.SelfRepair.Scheduler',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Mining.ValidationContext',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Election','Elixir.Archethic.Mining',
                  'Elixir.Archethic.Mining.SmartContractValidation',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction.CrossValidationStamp',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Mining.StandaloneWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Election',
             'Elixir.Archethic.Mining.TransactionContext',
             'Elixir.Archethic.Mining.ValidationContext',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {update,'Elixir.Archethic.Mining.DistributedWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Election',
             'Elixir.Archethic.Mining.TransactionContext',
             'Elixir.Archethic.Mining.ValidationContext',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.TransactionSummary',
             'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Contracts.Worker',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Contracts',
             'Elixir.Archethic.Contracts.Contract',
             'Elixir.Archethic.Contracts.Loader','Elixir.Archethic.Election',
             'Elixir.Archethic.TransactionChain','Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {apply,{supervisor, restart_child, ['Elixir.Archethic.ContractsSupervisor', 'Elixir.Archethic.ContractSupervisor']}},
    {apply,{supervisor, restart_child, ['Elixir.Archethic.ContractsSupervisor', 'Elixir.Archethic.Contracts.Loader']}},
    {delete_module,'Elixir.Archethic.Account.MemTables.StateLedger'},
    {delete_module,'Elixir.Archethic.Account.MemTables.TokenLedger'},
    {delete_module,'Elixir.Archethic.Account.MemTables.UCOLedger'},
    {delete_module,'Elixir.Archethic.Account.MemTablesLoader'},
    {delete_module,'Elixir.Archethic.Account.Supervisor'},
    {delete_module,'Elixir.Archethic.Account'},
    {delete_module,'Elixir.Archethic.Contracts.TransactionLookup'},
    {delete_module,'Elixir.Archethic.DB.EmbeddedImpl.InputsReader'},
    {delete_module,'Elixir.Archethic.DB.EmbeddedImpl.InputsWriter'},
    {apply,{supervisor,terminate_child,
                       ['Elixir.Archethic.Telemetry',prometheus_metrics]}},
    {apply,{supervisor,restart_child,
                       ['Elixir.Archethic.Telemetry',prometheus_metrics]}},
    {apply,{'Elixir.Mix.Tasks.Archethic.Migrate',run,["1.5.0-rc1",true]}}]}],
 [{"1.4.8",
   [{delete_module,'Elixir.Archethic.TransactionChain.DBLedger.FileImpl.Supervisor'},
    {delete_module,'Elixir.Archethic.TransactionChain.DBLedger.FileImpl'},
    {delete_module,'Elixir.Archethic.TransactionChain.DBLedger.Supervisor'},
    {delete_module,'Elixir.Archethic.TransactionChain.DBLedger'},
    {update,'Elixir.Archethic.BeaconChain.Supervisor',supervisor},
    {load_module,'Elixir.Archethic.Cldr.Currency',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Cldr.Number.Transliterate',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Contract',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.ActionInterpreter',
                 brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Contracts.Supervisor',supervisor},
    {load_module,'Elixir.Archethic.P2P.Message.SmartContractCallValidation',
                 brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Replication.TransactionPool',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SelfRepair.Supervisor',supervisor},
    {update,'Elixir.Archethic.TransactionChain.Supervisor',supervisor},
    {load_module,'Elixir.ArchethicWeb.API.GraphQL.Schema.Compiled',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.ExplorerRouter',brutal_purge,soft_purge,
                 []},
    {update,'Elixir.Archethic.BeaconChain.SummaryTimer',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.DB.EmbeddedImpl',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.DB',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB.EmbeddedImpl']},
    {load_module,'Elixir.Archethic.P2P.Message.TransactionSummaryMessage',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain.TransactionSummary']},
    {load_module,'Elixir.Archethic.P2P.MessageEnvelop',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.TransactionChain.Transaction.CrossValidationStamp',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.VersionedUnspentOutput',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.VersionedUnspentOutput']},
    {load_module,'Elixir.Archethic.Utils.Regression.Api',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Application',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Reward','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Utils.Regression.Benchmark.P2PMessage.Connection',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P.MessageEnvelop',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Utils.Regression.Playbook.SmartContract.Counter',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils.Regression.Api',
                  'Elixir.Archethic.Utils.Regression.Playbook.SmartContract']},
    {load_module,'Elixir.Archethic.Utils.Regression.Playbook.SmartContract',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils.Regression.Api',
                  'Elixir.Archethic.Utils.Regression.Playbook.SmartContract.Counter']},
    {load_module,'Elixir.Archethic.Utils',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {load_module,'Elixir.Archethic.TransactionChain.TransactionInput',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.ChainImpl',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Reward',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain','Elixir.Archethic.UTXO',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.UTXO.DBLedger.FileImpl',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.DB',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.VersionedUnspentOutput',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Election',
                  'Elixir.Archethic.Mining','Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.VersionedUnspentOutput',
                  'Elixir.Archethic.TransactionChain.TransactionInput']},
    {update,'Elixir.Archethic.BeaconChain.SlotTimer',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.DB','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.BeaconChain.Summary',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain.SlotTimer',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.SelfRepair.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.BeaconChain',
             'Elixir.Archethic.Bootstrap.Sync','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Contracts.Loader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Contracts.Contract',
             'Elixir.Archethic.Contracts.Worker','Elixir.Archethic.Election',
             'Elixir.Archethic.TransactionChain','Elixir.Archethic.UTXO']},
    {load_module,'Elixir.Archethic.Contracts',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Contracts.Loader']},
    {load_module,'Elixir.Archethic.Election',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.P2P.Client.Connection',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P.MessageEnvelop','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.ListenerProtocol',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.P2P.MessageEnvelop',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Mining',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election',
                  'Elixir.Archethic.Mining.DistributedWorkflow',
                  'Elixir.Archethic.Mining.StandaloneWorkflow']},
    {load_module,'Elixir.Archethic.P2P.Message.AddMiningContext',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Mining','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBalance',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.UTXO','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetFirstTransactionAddress',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetNextAddresses',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransactionInputs',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicationError',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Mining','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ValidateTransaction',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.VersionedUnspentOutput']},
    {load_module,'Elixir.Archethic.Replication.TransactionContext',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.BeaconChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain.SlotTimer',
                  'Elixir.Archethic.BeaconChain.SummaryTimer',
                  'Elixir.Archethic.DB','Elixir.Archethic.Election',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Bootstrap.Sync',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.P2P.Message.CrossValidate',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Mining',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.VersionedUnspentOutput',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetUnspentOutputs',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.VersionedUnspentOutput',
                  'Elixir.Archethic.UTXO','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.NotifyLastTransactionAddress',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Mining.SmartContractValidation',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.Mining.TransactionContext',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ValidateSmartContractCall',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Mining',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicatePendingTransactionChain',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.TransactionInput',
                  'Elixir.Archethic.TransactionChain.TransactionSummary',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.API.GraphQL.Schema.Resolver',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.Election','Elixir.Archethic.Mining',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.API.GraphQL.Schema',brutal_purge,
                 soft_purge,
                 ['Elixir.ArchethicWeb.API.GraphQL.Schema.Resolver']},
    {load_module,'Elixir.ArchethicWeb.WebUtils',brutal_purge,soft_purge,
                 ['Elixir.Archethic']},
    {load_module,'Elixir.ArchethicWeb.Explorer.Components.Amount',
                 brutal_purge,soft_purge,
                 ['Elixir.ArchethicWeb.WebUtils']},
    {load_module,'Elixir.ArchethicWeb.Explorer.Components.InputsList',
                 brutal_purge,soft_purge,
                 ['Elixir.ArchethicWeb.WebUtils']},
    {load_module,'Elixir.ArchethicWeb.Explorer.Components.UnspentOutputList',
                 brutal_purge,soft_purge,
                 ['Elixir.ArchethicWeb.WebUtils']},
    {load_module,'Elixir.Archethic.TransactionChain.TransactionSummary',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.TransactionChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB','Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.TransactionChain.TransactionSummary',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Utils.DetectNodeResponsiveness',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Mining','Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.ArchethicWeb.Explorer.TransactionChainLive',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.ArchethicWeb.WebUtils']},
    {load_module,'Elixir.Archethic.UTXO',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.VersionedUnspentOutput']},
    {load_module,'Elixir.ArchethicWeb.API.JsonRPC.Method.EstimateTransactionFee',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Mining',
                  'Elixir.Archethic.Mining.SmartContractValidation',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.ArchethicWeb.Explorer.ExplorerIndexLive',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.DB']},
    {load_module,'Elixir.ArchethicWeb.Explorer.ExplorerView',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain.Summary',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.Explorer.SettingsLive',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Reward',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.ArchethicWeb.Explorer.TransactionDetailsLive',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Reward',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.ArchethicWeb.Explorer.ExplorerView',
                  'Elixir.ArchethicWeb.WebUtils']},
    {load_module,'Elixir.Archethic.Replication.TransactionValidator',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Contracts.Contract','Elixir.Archethic.DB',
                  'Elixir.Archethic.Election','Elixir.Archethic.Mining',
                  'Elixir.Archethic.Mining.SmartContractValidation',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations']},
    {load_module,'Elixir.Archethic.Replication',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Election',
                  'Elixir.Archethic.Replication.TransactionContext',
                  'Elixir.Archethic.Replication.TransactionPool',
                  'Elixir.Archethic.Replication.TransactionValidator',
                  'Elixir.Archethic.Reward',
                  'Elixir.Archethic.TransactionChain','Elixir.Archethic.UTXO',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.SelfRepair',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Election',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.SelfRepair.Scheduler',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Mining.ValidationContext',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Election','Elixir.Archethic.Mining',
                  'Elixir.Archethic.Mining.SmartContractValidation',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction.CrossValidationStamp',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Mining.StandaloneWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Election',
             'Elixir.Archethic.Mining.TransactionContext',
             'Elixir.Archethic.Mining.ValidationContext',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {update,'Elixir.Archethic.Mining.DistributedWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Election',
             'Elixir.Archethic.Mining.TransactionContext',
             'Elixir.Archethic.Mining.ValidationContext',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.TransactionSummary',
             'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Contracts.Worker',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Contracts',
             'Elixir.Archethic.Contracts.Contract',
             'Elixir.Archethic.Contracts.Loader','Elixir.Archethic.Election',
             'Elixir.Archethic.TransactionChain','Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {add_module,'Elixir.Archethic.Account.MemTables.StateLedger'},
    {add_module,'Elixir.Archethic.Account.MemTables.TokenLedger'},
    {add_module,'Elixir.Archethic.Account.MemTables.UCOLedger'},
    {add_module,'Elixir.Archethic.Account.MemTablesLoader'},
    {add_module,'Elixir.Archethic.Account.Supervisor'},
    {add_module,'Elixir.Archethic.Account'},
    {add_module,'Elixir.Archethic.Contracts.TransactionLookup'},
    {add_module,'Elixir.Archethic.DB.EmbeddedImpl.InputsReader'},
    {add_module,'Elixir.Archethic.DB.EmbeddedImpl.InputsWriter'}]}]}.
