{"1.1.0-rc1",
 [{"1.0.8-rc1",
   [{update,'Elixir.Archethic.Account.MemTables.TokenLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Account.MemTables.UCOLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.BeaconChain.Subset.StatsCollector',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.BeaconChain.Update',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Cldr.Currency',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Cldr.Number.Transliterate',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Legacy.TransactionStatements',
                 brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Contracts.TransactionLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Crypto.SharedSecretsKeystore.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.BootstrapInfo',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.StatsInfo',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Election.Constraints',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Election.HypergeometricDistribution',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Governance.Pools.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Metrics.ETSFlush',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Metrics.Poller',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Mining.StandaloneWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.OracleChain.MemTable',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.OracleChain.Services.UCOPrice.Providers.CoinMarketCap',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.OracleChain.Services',brutal_purge,
                 soft_purge,[]},
    {update,'Elixir.Archethic.P2P.BootstrappingSeeds',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.P2P.GeoPatch.GeoIP.MaxMindDB',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.P2P.Listener',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.P2P.MemTable',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Release.CallMigrateScript',brutal_purge,
                 soft_purge,[]},
    {update,'Elixir.Archethic.Replication.TransactionPool',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Reward.MemTables.RewardTokens',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SelfRepair.NetworkView',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.TransactionChain.MemTables.KOLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.TransactionChain.MemTables.PendingLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.DetectNodeResponsiveness',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.JobCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.JobConductor',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.PortHandler',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.Regression.Benchmark.SeedHolder',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Utils',brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicCache.LRU',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicWeb.ExplorerLive.TopTransactionsCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.ExplorerRouter',brutal_purge,soft_purge,
                 []},
    {update,'Elixir.ArchethicWeb.FaucetRateLimiter',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicWeb.TransactionCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicWeb.TransactionSubscriber',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Mix.Tasks.Archethic.Regression',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.Archethic.BeaconChain.Slot',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.SummaryTimer',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Bootstrap.TransactionHandler',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.ContractConstants',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.ActionInterpreter',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.ContractConstants']},
    {update,'Elixir.Archethic.Crypto.Ed25519.LibSodiumPort',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils.PortHandler']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.Origin.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.Origin.TPMImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils.PortHandler']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.InputsWriter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.P2PView',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Mining.DistributedWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Networking.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.OracleChain.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.OracleChain.MemTable']},
    {update,'Elixir.Archethic.OracleChain.Services.HydratingCache',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.OracleChain.Services.UCOPrice',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.MessageEnvelop',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Reward.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Reward.MemTables.RewardTokens']},
    {update,'Elixir.Archethic.SelfRepair.Notifier',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.SelfRepair.RepairWorker',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.SelfRepair']},
    {update,'Elixir.Archethic.SelfRepair.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Mix.Tasks.Archethic.Migrate',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB.EmbeddedImpl.ChainWriter']},
    {update,'Elixir.Archethic.Account.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Account.MemTables.TokenLedger',
             'Elixir.Archethic.Account.MemTables.UCOLedger']},
    {update,'Elixir.Archethic.BeaconChain.SlotTimer',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Bootstrap',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Bootstrap.TransactionHandler',
                  'Elixir.Archethic.SelfRepair']},
    {load_module,'Elixir.Archethic.Contracts.Contract',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
             'Elixir.ArchethicCache.LRU']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
             'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.P2P.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P.MemTable','Elixir.Archethic.SelfRepair']},
    {update,'Elixir.Archethic.Reward.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.TransactionChain.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Contracts.Contract',
             'Elixir.Archethic.TransactionChain.MemTables.PendingLedger']},
    {load_module,'Elixir.Archethic.Application',brutal_purge,soft_purge,
                 ['Elixir.Archethic.SelfRepair','Elixir.Archethic.Utils',
                  'Elixir.Mix.Tasks.Archethic.Migrate']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Legacy',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter']},
    {update,'Elixir.Archethic.Contracts.Loader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Contracts.Contract',
             'Elixir.Archethic.Contracts.TransactionLookup',
             'Elixir.Archethic.Contracts.Worker']},
    {update,'Elixir.Archethic.OracleChain.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.OracleChain.Services','Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.P2P.Client.Connection',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P.MemTable',
             'Elixir.Archethic.P2P.MessageEnvelop','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.SelfRepair',brutal_purge,soft_purge,
                 ['Elixir.Archethic.SelfRepair.RepairWorker',
                  'Elixir.Archethic.SelfRepair.Scheduler',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain.Slot',
             'Elixir.Archethic.BeaconChain.SlotTimer',
             'Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter.ActionInterpreter',
                  'Elixir.Archethic.Contracts.Interpreter.Legacy']},
    {update,'Elixir.Archethic.Contracts.Worker',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Contracts.ContractConstants',
             'Elixir.Archethic.Contracts.Interpreter',
             'Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.SharedSecrets.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
             'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
             'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler',
             'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.Subset',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain.Slot',
             'Elixir.Archethic.BeaconChain.SlotTimer',
             'Elixir.Archethic.BeaconChain.Subset.StatsCollector',
             'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
             'Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Utils']},
    {apply, {supervisor, terminate_child,
            ['Elixir.Archethic.OracleChain.Supervisor',
             'Elixir.Archethic.OracleChain.ServiceCacheSupervisor']}},
    {apply, {supervisor, restart_child,
            ['Elixir.Archethic.OracleChain.Supervisor',
             'Elixir.Archethic.OracleChain.ServiceCacheSupervisor']}},
    {apply, {supervisor, terminate_child,
            ['Elixir.Archethic.SelfRepair.Supervisor',
             'Elixir.Archethic.SelfRepair.NetworkView']}},
    {apply, {supervisor, restart_child,
            ['Elixir.Archethic.SelfRepair.Supervisor',
             'Elixir.Archethic.SelfRepair.NetworkView']}},
    {apply,{'Elixir.Mix.Tasks.Archethic.Migrate',run,["1.1.0-rc1",true]}}]}],
 [{"1.0.8-rc1",
   [{update,'Elixir.Archethic.Account.MemTables.TokenLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Account.MemTables.UCOLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.BeaconChain.Subset.StatsCollector',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.BeaconChain.Update',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Cldr.Currency',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Cldr.Number.Transliterate',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Legacy.TransactionStatements',
                 brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Contracts.TransactionLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Crypto.SharedSecretsKeystore.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.BootstrapInfo',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.StatsInfo',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Election.Constraints',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Election.HypergeometricDistribution',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Governance.Pools.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Metrics.ETSFlush',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Metrics.Poller',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Mining.StandaloneWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.OracleChain.MemTable',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.OracleChain.Services.UCOPrice.Providers.CoinMarketCap',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.OracleChain.Services',brutal_purge,
                 soft_purge,[]},
    {update,'Elixir.Archethic.P2P.BootstrappingSeeds',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.P2P.GeoPatch.GeoIP.MaxMindDB',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.P2P.Listener',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.P2P.MemTable',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Release.CallMigrateScript',brutal_purge,
                 soft_purge,[]},
    {update,'Elixir.Archethic.Replication.TransactionPool',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Reward.MemTables.RewardTokens',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SelfRepair.NetworkView',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.TransactionChain.MemTables.KOLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.TransactionChain.MemTables.PendingLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.DetectNodeResponsiveness',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.JobCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.JobConductor',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.PortHandler',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.Regression.Benchmark.SeedHolder',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Utils',brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicCache.LRU',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicWeb.ExplorerLive.TopTransactionsCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.ExplorerRouter',brutal_purge,soft_purge,
                 []},
    {update,'Elixir.ArchethicWeb.FaucetRateLimiter',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicWeb.TransactionCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicWeb.TransactionSubscriber',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Mix.Tasks.Archethic.Regression',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.Archethic.BeaconChain.Slot',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.SummaryTimer',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Bootstrap.TransactionHandler',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.ContractConstants',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.ActionInterpreter',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.ContractConstants']},
    {update,'Elixir.Archethic.Crypto.Ed25519.LibSodiumPort',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils.PortHandler']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.Origin.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.Origin.TPMImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils.PortHandler']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.InputsWriter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.P2PView',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Mining.DistributedWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Networking.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.OracleChain.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.OracleChain.MemTable']},
    {update,'Elixir.Archethic.OracleChain.Services.HydratingCache',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.OracleChain.Services.UCOPrice',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.MessageEnvelop',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Reward.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Reward.MemTables.RewardTokens']},
    {update,'Elixir.Archethic.SelfRepair.Notifier',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.SelfRepair.RepairWorker',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.SelfRepair']},
    {update,'Elixir.Archethic.SelfRepair.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Mix.Tasks.Archethic.Migrate',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB.EmbeddedImpl.ChainWriter']},
    {update,'Elixir.Archethic.Account.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Account.MemTables.TokenLedger',
             'Elixir.Archethic.Account.MemTables.UCOLedger']},
    {update,'Elixir.Archethic.BeaconChain.SlotTimer',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Bootstrap',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Bootstrap.TransactionHandler',
                  'Elixir.Archethic.SelfRepair']},
    {load_module,'Elixir.Archethic.Contracts.Contract',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
             'Elixir.ArchethicCache.LRU']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
             'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.P2P.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P.MemTable','Elixir.Archethic.SelfRepair']},
    {update,'Elixir.Archethic.Reward.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.TransactionChain.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Contracts.Contract',
             'Elixir.Archethic.TransactionChain.MemTables.PendingLedger']},
    {load_module,'Elixir.Archethic.Application',brutal_purge,soft_purge,
                 ['Elixir.Archethic.SelfRepair','Elixir.Archethic.Utils',
                  'Elixir.Mix.Tasks.Archethic.Migrate']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Legacy',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter']},
    {update,'Elixir.Archethic.Contracts.Loader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Contracts.Contract',
             'Elixir.Archethic.Contracts.TransactionLookup',
             'Elixir.Archethic.Contracts.Worker']},
    {update,'Elixir.Archethic.OracleChain.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.OracleChain.Services','Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.P2P.Client.Connection',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P.MemTable',
             'Elixir.Archethic.P2P.MessageEnvelop','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.SelfRepair',brutal_purge,soft_purge,
                 ['Elixir.Archethic.SelfRepair.RepairWorker',
                  'Elixir.Archethic.SelfRepair.Scheduler',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain.Slot',
             'Elixir.Archethic.BeaconChain.SlotTimer',
             'Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter.ActionInterpreter',
                  'Elixir.Archethic.Contracts.Interpreter.Legacy']},
    {update,'Elixir.Archethic.Contracts.Worker',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Contracts.ContractConstants',
             'Elixir.Archethic.Contracts.Interpreter',
             'Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.SharedSecrets.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
             'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
             'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler',
             'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.Subset',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain.Slot',
             'Elixir.Archethic.BeaconChain.SlotTimer',
             'Elixir.Archethic.BeaconChain.Subset.StatsCollector',
             'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
             'Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Utils']}]}]}.
