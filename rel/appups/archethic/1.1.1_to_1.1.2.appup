{"1.1.2",
 [{"1.1.1",
    [{update,'Elixir.Archethic.P2P.Supervisor',supervisor},
    {update,'Elixir.Archethic.Account.MemTables.TokenLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Account.MemTables.UCOLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.BeaconChain.Subset.StatsCollector',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.BeaconChain.SummaryTimer',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Contracts.TransactionLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.Origin.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Crypto.SharedSecretsKeystore.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.BootstrapInfo',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.InputsWriter',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.P2PView',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.StatsInfo',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Election.Constraints',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Governance.Pools.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Metrics.ETSFlush',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.OracleChain.MemTable',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.OracleChain.Services.HydratingCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.P2P.GeoPatch.GeoIP.MaxMindDB',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.P2P.Listener',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.MessageId',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Node',brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Replication.TransactionPool',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Reward.MemTables.RewardTokens',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.TransactionChain.MemTables.KOLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.TransactionChain.MemTables.PendingLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.DetectNodeResponsiveness',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.JobCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.JobConductor',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.PortHandler',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.Regression.Benchmark.SeedHolder',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicCache.LRU',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicWeb.ExplorerLive.TopTransactionsCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.ExplorerRouter',brutal_purge,soft_purge,
                 []},
    {update,'Elixir.ArchethicWeb.TransactionCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.BeaconChain.Update',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.Crypto.Ed25519.LibSodiumPort',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils.PortHandler']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.Origin.TPMImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils.PortHandler']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB.EmbeddedImpl.ChainIndex']},
    {update,'Elixir.Archethic.Election.HypergeometricDistribution',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.Metrics.Poller',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.Mining.ValidationContext',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.OracleChain.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.OracleChain.MemTable']},
    {update,'Elixir.Archethic.P2P.BootstrappingSeeds',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.P2P.Client.Connection',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P.Message']},
    {update,'Elixir.Archethic.P2P.MemTable',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P.Node']},
    {load_module,'Elixir.Archethic.P2P.Message.BootstrappingNodes',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P.Node']},
    {update,'Elixir.Archethic.Reward.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Reward.MemTables.RewardTokens']},
    {update,'Elixir.Archethic.SelfRepair.RepairWorker',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.SelfRepair']},
    {update,'Elixir.Archethic.TransactionChain.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.TransactionChain.MemTables.PendingLedger']},
    {load_module,'Elixir.Archethic.P2P',brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P.BootstrappingSeeds',
                  'Elixir.Archethic.P2P.Client',
                  'Elixir.Archethic.P2P.MemTable',
                  'Elixir.Archethic.P2P.MemTableLoader',
                  'Elixir.Archethic.P2P.Message']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBootstrappingNodes',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.P2P.Message.ListNodes',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.P2P']},
    {update,'Elixir.ArchethicWeb.FaucetRateLimiter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic']},
    {load_module,'Elixir.ArchethicWeb.NodeView',brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P']},
    {update,'Elixir.ArchethicWeb.TransactionSubscriber',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P']},
    {load_module,'Elixir.ArchethicWeb.WorldMapLive',brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.Mining.PendingTransactionValidation',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P','Elixir.Archethic.P2P.Node']},
    {load_module,'Elixir.Archethic.SelfRepair.NetworkChain',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.P2P','Elixir.Archethic.SelfRepair']},
    {update,'Elixir.Archethic.SelfRepair.NetworkView',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.SelfRepair.Notifier',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain','Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic',
             'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
             'Elixir.ArchethicCache.LRU']},
    {load_module,'Elixir.Archethic.P2P.Client.DefaultImpl',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain.Update',
                  'Elixir.Archethic.P2P.Client.Connection',
                  'Elixir.Archethic.P2P.Message']},
    {load_module,'Elixir.Archethic.P2P.Client',brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P.Client.DefaultImpl']},
    {update,'Elixir.Archethic.Account.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Account.MemTables.TokenLedger',
             'Elixir.Archethic.Account.MemTables.UCOLedger']},
    {update,'Elixir.Archethic.P2P.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P.MemTable','Elixir.Archethic.P2P.Node',
             'Elixir.Archethic.SelfRepair']},
    {load_module,'Elixir.Archethic.P2P.Message',brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P.Message.BootstrappingNodes',
                  'Elixir.Archethic.P2P.Message.GetBootstrappingNodes',
                  'Elixir.Archethic.P2P.Message.ListNodes']},
    {update,'Elixir.Archethic.Reward.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.P2P',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.P2P',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.BeaconChain.SlotTimer',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.BeaconChain',
             'Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain',
             'Elixir.Archethic.BeaconChain.SlotTimer',
             'Elixir.Archethic.BeaconChain.SummaryTimer']},
    {update,'Elixir.Archethic.SharedSecrets.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P.Node',
             'Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
             'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
             'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler']},
    {load_module,'Elixir.Archethic.BeaconChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain.SlotTimer',
                  'Elixir.Archethic.BeaconChain.Subset',
                  'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
                  'Elixir.Archethic.BeaconChain.SummaryTimer',
                  'Elixir.Archethic.BeaconChain.Update',
                  'Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.Bootstrap.Sync',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.Bootstrap.TransactionHandler',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.P2P','Elixir.Archethic.P2P.Node']},
    {load_module,'Elixir.Archethic',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.P2P',
                  'Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.SelfRepair.NetworkChain',
                  'Elixir.Archethic.SelfRepair.NetworkView']},
    {update,'Elixir.Archethic.Contracts.Worker',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.P2P',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.Contracts.Loader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Contracts.TransactionLookup',
             'Elixir.Archethic.Contracts.Worker']},
    {update,'Elixir.Archethic.OracleChain.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.P2P',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.Networking.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.P2P',
             'Elixir.Archethic.P2P.Node',
             'Elixir.Archethic.SelfRepair.NetworkChain']},
    {update,'Elixir.Archethic.Mining.StandaloneWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain',
             'Elixir.Archethic.Mining.PendingTransactionValidation',
             'Elixir.Archethic.Mining.ValidationContext',
             'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message']},
    {load_module,'Elixir.Archethic.SelfRepair.Sync',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.SelfRepair']},
    {update,'Elixir.Archethic.SelfRepair.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.BeaconChain',
             'Elixir.Archethic.Bootstrap.Sync','Elixir.Archethic.P2P',
             'Elixir.Archethic.SelfRepair.Sync']},
    {load_module,'Elixir.Archethic.SelfRepair',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.P2P',
                  'Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.SelfRepair.RepairWorker',
                  'Elixir.Archethic.SelfRepair.Scheduler',
                  'Elixir.Archethic.SelfRepair.Sync']},
    {load_module,'Elixir.Archethic.Bootstrap',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Bootstrap.Sync',
                  'Elixir.Archethic.Bootstrap.TransactionHandler',
                  'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Node',
                  'Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.SelfRepair.NetworkChain']},
    {update,'Elixir.Archethic.Mining.DistributedWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain',
             'Elixir.Archethic.Mining.PendingTransactionValidation',
             'Elixir.Archethic.Mining.ValidationContext',
             'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message',
             'Elixir.Archethic.P2P.Node']},
    {update,'Elixir.Archethic.BeaconChain.Subset',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain',
             'Elixir.Archethic.BeaconChain.SlotTimer',
             'Elixir.Archethic.BeaconChain.Subset.StatsCollector',
             'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
             'Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Client',
             'Elixir.Archethic.SelfRepair']},
    {delete_module,'Elixir.Archethic.P2P.Message.GetP2PView'},
    {delete_module,'Elixir.Archethic.P2P.Message.P2PView'},
    {apply,{'Elixir.Mix.Tasks.Archethic.Migrate',run,["1.1.2",true]}}]}],
 [{"1.1.1",
   [{update,'Elixir.Archethic.Account.MemTables.TokenLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Account.MemTables.UCOLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.BeaconChain.Subset.StatsCollector',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.BeaconChain.SummaryTimer',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Contracts.TransactionLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.Origin.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Crypto.SharedSecretsKeystore.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.BootstrapInfo',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.InputsWriter',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.P2PView',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.StatsInfo',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Election.Constraints',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Governance.Pools.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Metrics.ETSFlush',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.OracleChain.MemTable',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.OracleChain.Services.HydratingCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.P2P.GeoPatch.GeoIP.MaxMindDB',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.P2P.Listener',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.MessageId',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Node',brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.P2P.Supervisor',supervisor},
    {update,'Elixir.Archethic.Replication.TransactionPool',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Reward.MemTables.RewardTokens',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.TransactionChain.MemTables.KOLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.TransactionChain.MemTables.PendingLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.DetectNodeResponsiveness',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.JobCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.JobConductor',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.PortHandler',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.Regression.Benchmark.SeedHolder',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicCache.LRU',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicWeb.ExplorerLive.TopTransactionsCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.ExplorerRouter',brutal_purge,soft_purge,
                 []},
    {update,'Elixir.ArchethicWeb.TransactionCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.BeaconChain.Update',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.Crypto.Ed25519.LibSodiumPort',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils.PortHandler']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.Origin.TPMImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils.PortHandler']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB.EmbeddedImpl.ChainIndex']},
    {update,'Elixir.Archethic.Election.HypergeometricDistribution',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.Metrics.Poller',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.Mining.ValidationContext',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.OracleChain.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.OracleChain.MemTable']},
    {update,'Elixir.Archethic.P2P.BootstrappingSeeds',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.P2P.Client.Connection',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P.Message']},
    {update,'Elixir.Archethic.P2P.MemTable',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P.Node']},
    {load_module,'Elixir.Archethic.P2P.Message.BootstrappingNodes',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P.Node']},
    {update,'Elixir.Archethic.Reward.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Reward.MemTables.RewardTokens']},
    {update,'Elixir.Archethic.SelfRepair.RepairWorker',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.SelfRepair']},
    {update,'Elixir.Archethic.TransactionChain.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.TransactionChain.MemTables.PendingLedger']},
    {load_module,'Elixir.Archethic.P2P',brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P.BootstrappingSeeds',
                  'Elixir.Archethic.P2P.Client',
                  'Elixir.Archethic.P2P.MemTable',
                  'Elixir.Archethic.P2P.MemTableLoader',
                  'Elixir.Archethic.P2P.Message']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBootstrappingNodes',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.P2P.Message.ListNodes',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.P2P']},
    {update,'Elixir.ArchethicWeb.FaucetRateLimiter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic']},
    {load_module,'Elixir.ArchethicWeb.NodeView',brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P']},
    {update,'Elixir.ArchethicWeb.TransactionSubscriber',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P']},
    {load_module,'Elixir.ArchethicWeb.WorldMapLive',brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.Mining.PendingTransactionValidation',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P','Elixir.Archethic.P2P.Node']},
    {load_module,'Elixir.Archethic.SelfRepair.NetworkChain',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.P2P','Elixir.Archethic.SelfRepair']},
    {update,'Elixir.Archethic.SelfRepair.NetworkView',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.SelfRepair.Notifier',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain','Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic',
             'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
             'Elixir.ArchethicCache.LRU']},
    {load_module,'Elixir.Archethic.P2P.Client.DefaultImpl',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain.Update',
                  'Elixir.Archethic.P2P.Client.Connection',
                  'Elixir.Archethic.P2P.Message']},
    {load_module,'Elixir.Archethic.P2P.Client',brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P.Client.DefaultImpl']},
    {update,'Elixir.Archethic.Account.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Account.MemTables.TokenLedger',
             'Elixir.Archethic.Account.MemTables.UCOLedger']},
    {update,'Elixir.Archethic.P2P.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P.MemTable','Elixir.Archethic.P2P.Node',
             'Elixir.Archethic.SelfRepair']},
    {load_module,'Elixir.Archethic.P2P.Message',brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P.Message.BootstrappingNodes',
                  'Elixir.Archethic.P2P.Message.GetBootstrappingNodes',
                  'Elixir.Archethic.P2P.Message.ListNodes']},
    {update,'Elixir.Archethic.Reward.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.P2P',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.P2P',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.BeaconChain.SlotTimer',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.BeaconChain',
             'Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain',
             'Elixir.Archethic.BeaconChain.SlotTimer',
             'Elixir.Archethic.BeaconChain.SummaryTimer']},
    {update,'Elixir.Archethic.SharedSecrets.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P.Node',
             'Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
             'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
             'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler']},
    {load_module,'Elixir.Archethic.BeaconChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain.SlotTimer',
                  'Elixir.Archethic.BeaconChain.Subset',
                  'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
                  'Elixir.Archethic.BeaconChain.SummaryTimer',
                  'Elixir.Archethic.BeaconChain.Update',
                  'Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.Bootstrap.Sync',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.Bootstrap.TransactionHandler',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.P2P','Elixir.Archethic.P2P.Node']},
    {load_module,'Elixir.Archethic',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.P2P',
                  'Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.SelfRepair.NetworkChain',
                  'Elixir.Archethic.SelfRepair.NetworkView']},
    {update,'Elixir.Archethic.Contracts.Worker',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.P2P',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.Contracts.Loader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Contracts.TransactionLookup',
             'Elixir.Archethic.Contracts.Worker']},
    {update,'Elixir.Archethic.OracleChain.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.P2P',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.Networking.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.P2P',
             'Elixir.Archethic.P2P.Node',
             'Elixir.Archethic.SelfRepair.NetworkChain']},
    {update,'Elixir.Archethic.Mining.StandaloneWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain',
             'Elixir.Archethic.Mining.PendingTransactionValidation',
             'Elixir.Archethic.Mining.ValidationContext',
             'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message']},
    {load_module,'Elixir.Archethic.SelfRepair.Sync',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.SelfRepair']},
    {update,'Elixir.Archethic.SelfRepair.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.BeaconChain',
             'Elixir.Archethic.Bootstrap.Sync','Elixir.Archethic.P2P',
             'Elixir.Archethic.SelfRepair.Sync']},
    {load_module,'Elixir.Archethic.SelfRepair',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.P2P',
                  'Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.SelfRepair.RepairWorker',
                  'Elixir.Archethic.SelfRepair.Scheduler',
                  'Elixir.Archethic.SelfRepair.Sync']},
    {load_module,'Elixir.Archethic.Bootstrap',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Bootstrap.Sync',
                  'Elixir.Archethic.Bootstrap.TransactionHandler',
                  'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Node',
                  'Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.SelfRepair.NetworkChain']},
    {update,'Elixir.Archethic.Mining.DistributedWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain',
             'Elixir.Archethic.Mining.PendingTransactionValidation',
             'Elixir.Archethic.Mining.ValidationContext',
             'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message',
             'Elixir.Archethic.P2P.Node']},
    {update,'Elixir.Archethic.BeaconChain.Subset',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain',
             'Elixir.Archethic.BeaconChain.SlotTimer',
             'Elixir.Archethic.BeaconChain.Subset.StatsCollector',
             'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
             'Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Client',
             'Elixir.Archethic.SelfRepair']},
    {add_module,'Elixir.Archethic.P2P.Message.GetP2PView'},
    {add_module,'Elixir.Archethic.P2P.Message.P2PView'}]}]}.
