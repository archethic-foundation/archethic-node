{"1.1.0",
 [{"1.0.7",
   [{add_module,'Elixir.Archethic.BeaconChain.NetworkCoordinates'},
    {add_module,'Elixir.Archethic.BeaconChain.Subset.StatsCollector'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.ASTHelper'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.ActionInterpreter'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.CommonInterpreter'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.ConditionInterpreter'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.ConditionValidator'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Legacy.ActionInterpreter'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Legacy.ConditionInterpreter'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Legacy.Library'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Legacy.TransactionStatements'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Legacy.UtilsInterpreter'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Legacy'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Chain'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Crypto'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Json'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.List'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Map'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Regex'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.String'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Time'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Token'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Library.Contract'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Scope'},
    {add_module,'Elixir.Archethic.OracleChain.ServiceCacheSupervisor'},
    {add_module,'Elixir.Archethic.OracleChain.Services.HydratingCache.State'},
    {add_module,'Elixir.Archethic.OracleChain.Services.HydratingCache'},
    {add_module,'Elixir.Archethic.OracleChain.Services.ProviderCacheSupervisor'},
    {add_module,'Elixir.Archethic.P2P.Message.FirstTransactionAddress'},
    {add_module,'Elixir.Archethic.P2P.Message.GetContractCalls'},
    {add_module,'Elixir.Archethic.P2P.Message.GetFirstTransactionAddress'},
    {add_module,'Elixir.Archethic.P2P.Message.GetNetworkStats'},
    {add_module,'Elixir.Archethic.P2P.Message.NetworkStats'},
    {add_module,'Elixir.Archethic.P2P.Message.ReplicationAttestationMessage'},
    {add_module,'Elixir.Archethic.P2P.Message.TransactionSummaryMessage'},
    {add_module,'Elixir.Archethic.P2P.MessageId'},
    {add_module,'Elixir.Archethic.Release.CallMigrateScript'},
    {add_module,'Elixir.Archethic.Release.TransformPurge'},
    {add_module,'Elixir.Archethic.SelfRepair.NetworkChain'},
    {add_module,'Elixir.Archethic.SelfRepair.NetworkView'},
    {add_module,'Elixir.ArchethicWeb.PlugThrottleByIPHigh'},
    {add_module,'Elixir.ArchethicWeb.PlugThrottleByIPLow'},
    {add_module,'Elixir.ArchethicWeb.PlugThrottleByIPandPath'},
    {add_module,'Elixir.ArchethicWeb.Plugs.RemoteIP'},
    {load_module,'Elixir.Archethic.Utils',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain.ReplicationAttestation',
                  'Elixir.Archethic.Crypto',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {update,'Elixir.Archethic.BeaconChain.SubsetSupervisor',supervisor},
    {apply,{'Elixir.Archethic.Utils',register_supervisor_name,
                  ['Elixir.Archethic.BeaconChain.Supervisor',
                  'Elixir.Archethic.BeaconChain.SubsetSupervisor']}},
    {apply,{supervisor, restart_child, ['Elixir.Archethic.BeaconChain.SubsetSupervisor', 'Elixir.Archethic.BeaconChain.Subset.StatsCollector']}},
    {update,'Elixir.Archethic.BeaconChain.Supervisor',supervisor},
    {load_module,'Elixir.Archethic.Cldr.Currency',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Cldr.Number.Transliterate',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library',
                 brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.BootstrapInfo',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.StatsInfo',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.Supervisor',supervisor},
    {update,'Elixir.Archethic.Election.Constraints',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Governance.Code.CICD.Docker',supervisor},
    {load_module,'Elixir.Archethic.Governance.Code.Proposal.Parser',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Governance.Pools.MemTable',brutal_purge,
                 soft_purge,[]},
    {update,'Elixir.Archethic.Governance.Supervisor',supervisor},
    {update,'Elixir.Archethic.Metrics.ETSFlush',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Networking.PortForwarding',brutal_purge,
                 soft_purge,[]},
    {update,'Elixir.Archethic.OracleChain.MemTable',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.OracleChain.Services.Impl',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.Archethic.OracleChain.Services.UCOPrice.Providers.CoinMarketCap',
                 brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.OracleChain.Supervisor',supervisor},
    {apply,{'Elixir.Archethic.Utils',register_supervisor_name,
                  ['Elixir.Archethic.Supervisor',
                  'Elixir.Archethic.OracleChain.Supervisor']}},
    {apply,{supervisor, restart_child, ['Elixir.Archethic.OracleChain.Supervisor', 'Elixir.Archethic.OracleChain.ServiceCacheSupervisor']}},
    {update,'Elixir.Archethic.P2P.GeoPatch.GeoIP.MaxMindDB',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.GeoPatch',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.BootstrappingNodes',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.EncryptedStorageNonce',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.Error',brutal_purge,soft_purge,
                 []},
    {load_module,'Elixir.Archethic.P2P.Message.NodeList',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.NotFound',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.Ok',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.P2PView',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.Ping',brutal_purge,soft_purge,
                 []},
    {load_module,'Elixir.Archethic.P2P.Message.TransactionChainLength',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.TransactionInputList',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.UnspentOutputList',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.PubSub',brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Replication.TransactionPool',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Reward.MemTables.RewardTokens',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SelfRepair.Supervisor',supervisor},
    {apply,{supervisor, restart_child, ['Elixir.Archethic.SelfRepair.Supervisor', 'Elixir.Archethic.SelfRepair.NetworkView']}},
    {update,'Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Telemetry',supervisor},
    {update,'Elixir.Archethic.TransactionChain.MemTables.KOLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.TransactionChain.MemTables.PendingLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.JobCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.JobConductor',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.PortHandler',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.Regression.Benchmark.SeedHolder',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicCache.LRU',brutal_purge,soft_purge,[]},

    {update,'Elixir.ArchethicWeb.Supervisor',supervisor},
    {apply,{supervisor, restart_child, ['Elixir.ArchethicWeb.Supervisor', 'Elixir.ArchethicWeb.PlugAttack.Storage']}},
    {load_module,'Elixir.Archethic.Bootstrap',brutal_purge,soft_purge, [
                  'Elixir.Archethic.Bootstrap.NetworkConstraints',
                  'Elixir.Archethic.Bootstrap.Sync',
                  'Elixir.Archethic.Bootstrap.TransactionHandler',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.PubSub','Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.ArchethicWeb.AEWebRouter',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.API.WebHostingController.DirectoryListing',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.DirListingView',brutal_purge,soft_purge,
                 []},
    {update,'Elixir.ArchethicWeb.ExplorerLive.TopTransactionsCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.ExplorerRouter.Helpers',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.GraphQLSchema.BeaconChainSummary',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.GraphQLSchema.Compiled',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.Pagination',brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicWeb.TransactionCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Mix.Tasks.Archethic.Regression',brutal_purge,
                 soft_purge,[]},
    {update,'Elixir.Archethic.Account.MemTables.TokenLedger',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB']},
    {update,'Elixir.Archethic.Account.MemTables.UCOLedger',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB']},
    {load_module,'Elixir.Archethic.Contracts.ContractConstants',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Contracts.TransactionLookup',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB']},
    {update,'Elixir.Archethic.Crypto.Ed25519.LibSodiumPort',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils.PortHandler']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.Origin.TPMImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils.PortHandler']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.P2PView',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.OracleChain.Services.UCOPrice',
                brutal_purge,soft_purge,
                ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.OracleChain.Services',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto']},
    {update,'Elixir.Archethic.P2P.Listener',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.PubSub']},
    {load_module,'Elixir.Archethic.P2P.Message.Balance',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.BeaconSummaryList',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain.Summary']},
    {load_module,'Elixir.Archethic.P2P.Message.BeaconUpdate',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.FirstPublicKey',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GenesisAddress',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBalance',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBeaconSummariesAggregate',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBootstrappingNodes',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.P2P.Message.GetUnspentOutputs',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.LastTransactionAddress',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ListNodes',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.P2P.Message.TransactionList',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction']},
    {load_module,'Elixir.Archethic.P2P.Message.TransactionSummaryList',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.SelfRepair.RepairWorker',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.SelfRepair']},
    {load_module,'Elixir.ArchethicWeb.API.WebHostingController.Resources',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic']},
    {load_module,'Elixir.ArchethicWeb.CodeView',brutal_purge,soft_purge,
                 ['Elixir.ArchethicWeb.ExplorerRouter.Helpers']},
    {load_module,'Elixir.ArchethicWeb.Endpoint',brutal_purge,soft_purge,
                 ['Elixir.Archethic']},
    {update,'Elixir.ArchethicWeb.FaucetRateLimiter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic']},
    {load_module,'Elixir.ArchethicWeb.LayoutView',brutal_purge,soft_purge,
                 ['Elixir.ArchethicWeb.ExplorerRouter.Helpers']},
    {load_module,'Elixir.ArchethicWeb.UserSocket',brutal_purge,soft_purge,
                 ['Elixir.Archethic']},
    {load_module,'Elixir.Archethic.BeaconChain.SummaryAggregate',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain.ReplicationAttestation',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.SummaryTimer',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.PubSub','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.Update',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.InputsWriter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB.EmbeddedImpl','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Governance.Pools.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Governance.Pools.MemTable',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.Metrics.Poller',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.P2P.MemTable',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.PubSub']},
    {load_module,'Elixir.Archethic.P2P.Message.AcknowledgeStorage',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Mining','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.AddMiningContext',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Mining','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.CrossValidate',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Mining','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.CrossValidationDone',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Mining','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBeaconSummaries',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBeaconSummary',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetCurrentSummaries',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.BeaconChain.Subset']},
    {load_module,'Elixir.Archethic.P2P.Message.GetFirstPublicKey',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetGenesisAddress',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetLastTransaction',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetLastTransactionAddress',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetNextAddresses',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetP2PView',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.P2P','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetStorageNonce',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransaction',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransactionChain',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransactionChainLength',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransactionInputs',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransactionSummary',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.NotifyEndOfNodeSync',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.NotifyPreviousChain',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Replication','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.NotifyReplicationValidation',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Mining','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.RegisterBeaconUpdates',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicationError',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Mining','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ValidateTransaction',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain.Transaction']},
    {load_module,'Elixir.Archethic.P2P.Message.ValidationError',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils',
                  'Elixir.ArchethicWeb.TransactionSubscriber']},
    {load_module,'Elixir.Archethic.TransactionChain.Transaction',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.BeaconChain.Slot',brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P',
                  'Elixir.Archethic.TransactionChain.TransactionSummary',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.NewTransaction',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.TransactionChain.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Contracts.Contract','Elixir.Archethic.DB',
             'Elixir.Archethic.TransactionChain.MemTables.PendingLedger']},
    {load_module,'Elixir.Archethic.BeaconChain.ReplicationAttestation',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.Election.HypergeometricDistribution',
                  'Elixir.Archethic.P2P',
                  'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {load_module,'Elixir.Archethic.BeaconChain.Summary',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain.ReplicationAttestation',
                  'Elixir.Archethic.BeaconChain.SlotTimer',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Bootstrap.NetworkConstraints',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.OracleChain','Elixir.Archethic.Reward',
                  'Elixir.Archethic.SharedSecrets']},
    {load_module,'Elixir.Archethic.Bootstrap.TransactionHandler',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.OracleChain.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.OracleChain',
             'Elixir.Archethic.OracleChain.MemTable',
             'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.TransactionChain.TransactionSummary',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P','Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Account.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Account.MemTables.TokenLedger',
             'Elixir.Archethic.Account.MemTables.UCOLedger',
             'Elixir.Archethic.Crypto','Elixir.Archethic.Reward',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.P2P.BootstrappingSeeds',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.DB',
             'Elixir.Archethic.P2P','Elixir.Archethic.P2P.GeoPatch',
             'Elixir.Archethic.PubSub']},
    {update,'Elixir.Archethic.P2P.Client.Connection',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P.MemTable',
             'Elixir.Archethic.P2P.Message',
             'Elixir.Archethic.P2P.MessageEnvelop','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Client.DefaultImpl',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain.Update',
                  'Elixir.Archethic.Crypto',
                  'Elixir.Archethic.P2P.Client.Connection',
                  'Elixir.Archethic.P2P.Message']},
    {load_module,'Elixir.Archethic.P2P.Message.NewBeaconSlot',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.BeaconChain.Slot',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.SlotTimer',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.BeaconChain',
             'Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Crypto','Elixir.Archethic.DB',
             'Elixir.Archethic.P2P','Elixir.Archethic.PubSub',
             'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain',
             'Elixir.Archethic.BeaconChain.Slot',
             'Elixir.Archethic.BeaconChain.SlotTimer',
             'Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.PubSub','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Application',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.OracleChain','Elixir.Archethic.Reward',
                  'Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.SharedSecrets','Elixir.Archethic.Utils',
                  'Elixir.ArchethicWeb.Endpoint',
                  'Elixir.Mix.Tasks.Archethic.Migrate']},
    {load_module,'Elixir.Archethic.Bootstrap.NetworkInit',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Bootstrap','Elixir.Archethic.Crypto',
                  'Elixir.Archethic.Mining','Elixir.Archethic.PubSub',
                  'Elixir.Archethic.Replication','Elixir.Archethic.Reward',
                  'Elixir.Archethic.SharedSecrets',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {load_module,'Elixir.Archethic.TransactionChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.DB',
                  'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.TransactionChain.MemTables.KOLedger',
                  'Elixir.Archethic.TransactionChain.MemTables.PendingLedger',
                  'Elixir.Archethic.TransactionChain.MemTablesLoader',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {update,'Elixir.Archethic.Reward.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Reward.MemTables.RewardTokens',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.Utils.DetectNodeResponsiveness',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Mining','Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.Utils.Regression.Playbook',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.TransactionChain.Transaction']},
    {load_module,'Elixir.ArchethicWeb.CodeProposalDetailsLive',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.PubSub']},
    {update,'Elixir.ArchethicWeb.TransactionSubscriber',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P','Elixir.Archethic.PubSub']},
    {load_module,'Elixir.Mix.Tasks.Archethic.Migrate',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB.EmbeddedImpl',
                  'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter']},
    {load_module,'Elixir.Archethic.Replication.TransactionContext',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P','Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction']},

    {load_module,'Elixir.Archethic.P2P.Message.NotifyLastTransactionAddress',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts','Elixir.Archethic.P2P',
                  'Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicatePendingTransactionChain',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain.TransactionSummary',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.OracleChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.OracleChain.MemTable',
                  'Elixir.Archethic.OracleChain.MemTableLoader',
                  'Elixir.Archethic.OracleChain.Scheduler',
                  'Elixir.Archethic.OracleChain.Services',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.GraphQLSchema.Resolver',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.BeaconChain.SummaryAggregate',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.Mining',
                  'Elixir.Archethic.P2P','Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.GraphQLSchema',brutal_purge,soft_purge,
                 ['Elixir.Archethic.OracleChain',
                  'Elixir.ArchethicWeb.GraphQLSchema.Resolver']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicateTransaction',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.P2P.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.DB',
             'Elixir.Archethic.P2P','Elixir.Archethic.P2P.GeoPatch',
             'Elixir.Archethic.P2P.MemTable','Elixir.Archethic.SelfRepair',
             'Elixir.Archethic.SharedSecrets',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.Reward.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.DB','Elixir.Archethic.P2P',
             'Elixir.Archethic.PubSub','Elixir.Archethic.Reward',
             'Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {load_module,'Elixir.Archethic.Replication.TransactionValidator',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Bootstrap','Elixir.Archethic.Contracts',
                  'Elixir.Archethic.DB','Elixir.Archethic.Mining',
                  'Elixir.Archethic.OracleChain','Elixir.Archethic.P2P',
                  'Elixir.Archethic.SharedSecrets',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction']},
    {update,'Elixir.Archethic.BeaconChain.Subset',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain',
             'Elixir.Archethic.BeaconChain.Slot',
             'Elixir.Archethic.BeaconChain.SlotTimer',
             'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
             'Elixir.Archethic.BeaconChain.Summary',
             'Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
             'Elixir.Archethic.PubSub','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.BeaconChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain.SlotTimer',
                  'Elixir.Archethic.BeaconChain.Subset',
                  'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
                  'Elixir.Archethic.BeaconChain.SummaryAggregate',
                  'Elixir.Archethic.BeaconChain.SummaryTimer',
                  'Elixir.Archethic.BeaconChain.Update',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.DB',
                  'Elixir.Archethic.P2P','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Bootstrap.Sync',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.Bootstrap.NetworkInit',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.SharedSecrets',
                  'Elixir.Archethic.TransactionChain']},
    
    {load_module,'Elixir.Archethic.DB.EmbeddedImpl',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB.EmbeddedImpl.BootstrapInfo',
                  'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
                  'Elixir.Archethic.DB.EmbeddedImpl.ChainReader',
                  'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
                  'Elixir.Archethic.DB.EmbeddedImpl.InputsWriter',
                  'Elixir.Archethic.DB.EmbeddedImpl.P2PView',
                  'Elixir.Archethic.DB.EmbeddedImpl.StatsInfo',
                  'Elixir.Archethic.DB.EmbeddedImpl.Supervisor',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.DB',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB.EmbeddedImpl']},



    {load_module,'Elixir.Archethic.Governance.Code.CICD',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Governance.Code.CICD.Docker']},
    {load_module,'Elixir.Archethic.Contracts.Contract',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Contracts.ContractConstants']},
    {load_module,'Elixir.Archethic.Crypto',brutal_purge,soft_purge,
                 ['Elixir.Archethic.SharedSecrets',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.Origin.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Election.HypergeometricDistribution',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P','Elixir.Archethic.PubSub']},
    {update,'Elixir.Archethic.Crypto.SharedSecretsKeystore.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.DB',
             'Elixir.Archethic.SharedSecrets',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto',
             'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.ArchethicCache.LRU']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain.Summary',
             'Elixir.Archethic.BeaconChain.SummaryAggregate',
             'Elixir.Archethic.Crypto',
             'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.DB.EmbeddedImpl.ChainReader',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain.Summary',
                  'Elixir.Archethic.BeaconChain.SummaryAggregate',
                  'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
                  'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.OracleChain.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.OracleChain',
             'Elixir.Archethic.OracleChain.Services','Elixir.Archethic.P2P',
             'Elixir.Archethic.PubSub','Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {load_module,'Elixir.Archethic.Reward',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.OracleChain',
                  'Elixir.Archethic.P2P',
                  'Elixir.Archethic.Reward.MemTables.RewardTokens',
                  'Elixir.Archethic.Reward.MemTablesLoader',
                  'Elixir.Archethic.Reward.Scheduler',
                  'Elixir.Archethic.SharedSecrets',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Contracts.Worker',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic',
             'Elixir.Archethic.Contracts.ContractConstants',
             'Elixir.Archethic.Contracts.Interpreter',
             'Elixir.Archethic.Crypto','Elixir.Archethic.Mining',
             'Elixir.Archethic.OracleChain','Elixir.Archethic.P2P',
             'Elixir.Archethic.PubSub','Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {load_module,'Elixir.Archethic.Contracts',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter',
                  'Elixir.Archethic.Contracts.Loader',
                  'Elixir.Archethic.Contracts.TransactionLookup',
                  'Elixir.Archethic.Contracts.Worker']},
    {load_module,'Elixir.Archethic.Governance.Code',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.Governance.Code.CICD',
                  'Elixir.Archethic.P2P','Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Mining.PendingTransactionValidation',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts','Elixir.Archethic.Crypto',
                  'Elixir.Archethic.DB','Elixir.Archethic.OracleChain',
                  'Elixir.Archethic.P2P','Elixir.Archethic.Reward',
                  'Elixir.Archethic.SharedSecrets',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain.Summary',
                  'Elixir.Archethic.BeaconChain.SummaryAggregate',
                  'Elixir.Archethic.P2P.Message.AcknowledgeStorage',
                  'Elixir.Archethic.P2P.Message.AddMiningContext',
                  'Elixir.Archethic.P2P.Message.Balance',
                  'Elixir.Archethic.P2P.Message.BeaconSummaryList',
                  'Elixir.Archethic.P2P.Message.BeaconUpdate',
                  'Elixir.Archethic.P2P.Message.BootstrappingNodes',
                  'Elixir.Archethic.P2P.Message.CrossValidate',
                  'Elixir.Archethic.P2P.Message.CrossValidationDone',
                  'Elixir.Archethic.P2P.Message.EncryptedStorageNonce',
                  'Elixir.Archethic.P2P.Message.Error',
                  'Elixir.Archethic.P2P.Message.FirstPublicKey',
                  'Elixir.Archethic.P2P.Message.GenesisAddress',
                  'Elixir.Archethic.P2P.Message.GetBalance',
                  'Elixir.Archethic.P2P.Message.GetBeaconSummaries',
                  'Elixir.Archethic.P2P.Message.GetBeaconSummariesAggregate',
                  'Elixir.Archethic.P2P.Message.GetBeaconSummary',
                  'Elixir.Archethic.P2P.Message.GetBootstrappingNodes',
                  'Elixir.Archethic.P2P.Message.GetCurrentSummaries',
                  'Elixir.Archethic.P2P.Message.GetFirstPublicKey',
                  'Elixir.Archethic.P2P.Message.GetGenesisAddress',
                  'Elixir.Archethic.P2P.Message.GetLastTransaction',
                  'Elixir.Archethic.P2P.Message.GetLastTransactionAddress',
                  'Elixir.Archethic.P2P.Message.GetNextAddresses',
                  'Elixir.Archethic.P2P.Message.GetP2PView',
                  'Elixir.Archethic.P2P.Message.GetStorageNonce',
                  'Elixir.Archethic.P2P.Message.GetTransaction',
                  'Elixir.Archethic.P2P.Message.GetTransactionChain',
                  'Elixir.Archethic.P2P.Message.GetTransactionChainLength',
                  'Elixir.Archethic.P2P.Message.GetTransactionInputs',
                  'Elixir.Archethic.P2P.Message.GetTransactionSummary',
                  'Elixir.Archethic.P2P.Message.GetUnspentOutputs',
                  'Elixir.Archethic.P2P.Message.LastTransactionAddress',
                  'Elixir.Archethic.P2P.Message.ListNodes',
                  'Elixir.Archethic.P2P.Message.NewBeaconSlot',
                  'Elixir.Archethic.P2P.Message.NewTransaction',
                  'Elixir.Archethic.P2P.Message.NodeList',
                  'Elixir.Archethic.P2P.Message.NotFound',
                  'Elixir.Archethic.P2P.Message.NotifyEndOfNodeSync',
                  'Elixir.Archethic.P2P.Message.NotifyLastTransactionAddress',
                  'Elixir.Archethic.P2P.Message.NotifyPreviousChain',
                  'Elixir.Archethic.P2P.Message.NotifyReplicationValidation',
                  'Elixir.Archethic.P2P.Message.Ok',
                  'Elixir.Archethic.P2P.Message.P2PView',
                  'Elixir.Archethic.P2P.Message.Ping',
                  'Elixir.Archethic.P2P.Message.RegisterBeaconUpdates',
                  'Elixir.Archethic.P2P.Message.ReplicatePendingTransactionChain',
                  'Elixir.Archethic.P2P.Message.ReplicateTransaction',
                  'Elixir.Archethic.P2P.Message.ReplicationError',
                  'Elixir.Archethic.P2P.Message.ShardRepair',
                  'Elixir.Archethic.P2P.Message.StartMining',
                  'Elixir.Archethic.P2P.Message.TransactionChainLength',
                  'Elixir.Archethic.P2P.Message.TransactionInputList',
                  'Elixir.Archethic.P2P.Message.TransactionList',
                  'Elixir.Archethic.P2P.Message.TransactionSummaryList',
                  'Elixir.Archethic.P2P.Message.UnspentOutputList',
                  'Elixir.Archethic.P2P.Message.ValidateTransaction',
                  'Elixir.Archethic.P2P.Message.ValidationError',
                  'Elixir.Archethic.TransactionChain.Transaction']},
    {load_module,'Elixir.Archethic.P2P.MessageEnvelop',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.API.TransactionController',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Mining',
                  'Elixir.Archethic.OracleChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.ArchethicWeb.TransactionSubscriber']},
    {load_module,'Elixir.ArchethicWeb.API.OriginKeyController',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Crypto',
                  'Elixir.Archethic.SharedSecrets',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.ArchethicWeb.TransactionSubscriber']},
    {load_module,'Elixir.ArchethicWeb.FaucetController',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Crypto',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils',
                  'Elixir.ArchethicWeb.FaucetRateLimiter',
                  'Elixir.ArchethicWeb.TransactionSubscriber']},
    {load_module,'Elixir.ArchethicWeb.ExplorerRouter',brutal_purge,soft_purge,
                 ['Elixir.ArchethicWeb.API.OriginKeyController',
                  'Elixir.ArchethicWeb.API.TransactionController',
                  'Elixir.ArchethicWeb.FaucetController']},
    {load_module,'Elixir.Archethic.P2P.Message.ShardRepair',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.SelfRepair','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.StartMining',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.Mining',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.NodeSharedSecretsChainLive',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.PubSub','Elixir.Archethic.SharedSecrets',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.ArchethicWeb.ExplorerRouter.Helpers']},
    {load_module,'Elixir.ArchethicWeb.RewardChainLive',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.PubSub','Elixir.Archethic.Reward',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.ArchethicWeb.ExplorerRouter.Helpers']},
    {update,'Elixir.Archethic.SelfRepair.Notifier',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Crypto',
             'Elixir.Archethic.P2P','Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.Contracts.Interpreter',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.SharedSecrets',
                  'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.SelfRepair.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Bootstrap.Sync',
             'Elixir.Archethic.P2P','Elixir.Archethic.PubSub',
             'Elixir.Archethic.SelfRepair.Sync','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.P2P','Elixir.Archethic.PubSub',
             'Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.SharedSecrets.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.SharedSecrets',
             'Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
             'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
             'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler',
             'Elixir.Archethic.TransactionChain','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.SharedSecrets',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
                  'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
                  'Elixir.Archethic.SharedSecrets.MemTablesLoader',
                  'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.P2P.BootstrappingSeeds',
                  'Elixir.Archethic.P2P.GeoPatch',
                  'Elixir.Archethic.P2P.MemTable',
                  'Elixir.Archethic.P2P.MemTableLoader',
                  'Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.OracleChainLive',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.OracleChain',
                  'Elixir.Archethic.P2P','Elixir.Archethic.PubSub',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.ArchethicWeb.ExplorerRouter.Helpers']},
    {load_module,'Elixir.ArchethicWeb.BeaconChainLive',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.BeaconChain.SummaryAggregate',
                  'Elixir.Archethic.P2P','Elixir.Archethic.PubSub',
                  'Elixir.ArchethicWeb.ExplorerRouter.Helpers',
                  'Elixir.ArchethicWeb.TransactionCache']},
    {load_module,'Elixir.ArchethicWeb.SettingsLive',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Crypto',
                  'Elixir.Archethic.P2P','Elixir.Archethic.Reward',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.ArchethicWeb.TransactionSubscriber']},
    {update,'Elixir.Archethic.Mining.StandaloneWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Crypto',
             'Elixir.Archethic.Mining.PendingTransactionValidation',
             'Elixir.Archethic.Mining.ValidationContext',
             'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {load_module,'Elixir.Archethic.SelfRepair.Sync.TransactionHandler',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain.ReplicationAttestation',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.TransactionSummary',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Mining.DistributedWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Crypto',
             'Elixir.Archethic.Mining.PendingTransactionValidation',
             'Elixir.Archethic.Mining.ValidationContext',
             'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.TransactionChain.TransactionSummary',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Mining',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.Mining.DistributedWorkflow',
                  'Elixir.Archethic.Mining.PendingTransactionValidation',
                  'Elixir.Archethic.Mining.StandaloneWorkflow',
                  'Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.Contracts.Loader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Contracts',
             'Elixir.Archethic.Contracts.Contract',
             'Elixir.Archethic.Contracts.TransactionLookup',
             'Elixir.Archethic.Contracts.Worker',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction']},
    {load_module,'Elixir.Archethic.Mining.ValidationContext',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain.ReplicationAttestation',
                  'Elixir.Archethic.Contracts','Elixir.Archethic.Mining',
                  'Elixir.Archethic.OracleChain','Elixir.Archethic.P2P',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Networking.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.Networking.PortForwarding',
             'Elixir.Archethic.P2P','Elixir.Archethic.PubSub',
             'Elixir.Archethic.Replication',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.SelfRepair',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.SelfRepair.RepairWorker',
                  'Elixir.Archethic.SelfRepair.Scheduler',
                  'Elixir.Archethic.SelfRepair.Sync',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.SelfRepair.Sync',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.BeaconChain.SummaryAggregate',
                  'Elixir.Archethic.Bootstrap.NetworkConstraints',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.DB',
                  'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.PubSub','Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.SelfRepair.Sync.TransactionHandler',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Replication',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.OracleChain',
                  'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.PubSub',
                  'Elixir.Archethic.Replication.TransactionContext',
                  'Elixir.Archethic.Replication.TransactionPool',
                  'Elixir.Archethic.Replication.TransactionValidator',
                  'Elixir.Archethic.Reward','Elixir.Archethic.SharedSecrets',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {delete_module,'Elixir.Archethic.Contracts.ActionInterpreter'},
    {delete_module,'Elixir.Archethic.Contracts.ConditionInterpreter'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.TransactionStatements'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Utils'},
    {delete_module,'Elixir.Archethic.P2P.Message.ReplicateTransactionChain'},
    {apply,{supervisor, restart_child,
            ['Elixir.Archethic.DB.EmbeddedImpl.Supervisor',chain_index_cache]}},
    {apply,{supervisor, restart_child,
            ['Elixir.Archethic.DB.EmbeddedImpl.Supervisor',
            'Elixir.Archethic.DB.EmbeddedImpl.ChainWriterSupervisor']}},

    {apply,{supervisor, start_child, [
			  'Elixir.Archethic.Supervisor',
			  #{
                                id => 'Elixir.Archethic.RunExclusiveRegistry',
                                start => {'Elixir.Registry', start_link,
                                        [[{keys, unique}, {name, 'Elixir.Archethic.RunExclusiveRegistry'}]]},
                                type => supervisor
			  }
    ]}}, 
    {apply,{'Elixir.Mix.Tasks.Archethic.Migrate',run,["1.1.0",true]}}]}],
 [{"1.0.7",
   [{delete_module,'Elixir.Archethic.BeaconChain.NetworkCoordinates'},
    {delete_module,'Elixir.Archethic.BeaconChain.Subset.StatsCollector'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.ASTHelper'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.ActionInterpreter'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.CommonInterpreter'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.ConditionInterpreter'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.ConditionValidator'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Legacy.ActionInterpreter'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Legacy.ConditionInterpreter'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Legacy.Library'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Legacy.TransactionStatements'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Legacy.UtilsInterpreter'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Legacy'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Chain'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Crypto'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Json'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.List'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Map'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Regex'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.String'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Time'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Token'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Library.Contract'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Scope'},
    {delete_module,'Elixir.Archethic.OracleChain.ServiceCacheSupervisor'},
    {delete_module,'Elixir.Archethic.OracleChain.Services.HydratingCache.State'},
    {delete_module,'Elixir.Archethic.OracleChain.Services.HydratingCache'},
    {delete_module,'Elixir.Archethic.OracleChain.Services.ProviderCacheSupervisor'},
    {delete_module,'Elixir.Archethic.P2P.Message.FirstTransactionAddress'},
    {delete_module,'Elixir.Archethic.P2P.Message.GetContractCalls'},
    {delete_module,'Elixir.Archethic.P2P.Message.GetFirstTransactionAddress'},
    {delete_module,'Elixir.Archethic.P2P.Message.GetNetworkStats'},
    {delete_module,'Elixir.Archethic.P2P.Message.NetworkStats'},
    {delete_module,'Elixir.Archethic.P2P.Message.ReplicationAttestationMessage'},
    {delete_module,'Elixir.Archethic.P2P.Message.TransactionSummaryMessage'},
    {delete_module,'Elixir.Archethic.P2P.MessageId'},
    {delete_module,'Elixir.Archethic.Release.CallMigrateScript'},
    {delete_module,'Elixir.Archethic.Release.TransformPurge'},
    {delete_module,'Elixir.Archethic.SelfRepair.NetworkChain'},
    {delete_module,'Elixir.Archethic.SelfRepair.NetworkView'},
    {delete_module,'Elixir.ArchethicWeb.PlugThrottleByIPHigh'},
    {delete_module,'Elixir.ArchethicWeb.PlugThrottleByIPLow'},
    {delete_module,'Elixir.ArchethicWeb.PlugThrottleByIPandPath'},
    {delete_module,'Elixir.ArchethicWeb.Plugs.RemoteIP'},
    {update,'Elixir.Archethic.BeaconChain.SubsetSupervisor',supervisor},
    {update,'Elixir.Archethic.BeaconChain.Supervisor',supervisor},
    {load_module,'Elixir.Archethic.Cldr.Currency',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Cldr.Number.Transliterate',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library',
                 brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.BootstrapInfo',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.StatsInfo',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.Supervisor',supervisor},
    {update,'Elixir.Archethic.Election.Constraints',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Governance.Code.CICD.Docker',supervisor},
    {load_module,'Elixir.Archethic.Governance.Code.Proposal.Parser',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Governance.Pools.MemTable',brutal_purge,
                 soft_purge,[]},
    {update,'Elixir.Archethic.Governance.Supervisor',supervisor},
    {update,'Elixir.Archethic.Metrics.ETSFlush',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Networking.PortForwarding',brutal_purge,
                 soft_purge,[]},
    {update,'Elixir.Archethic.OracleChain.MemTable',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.OracleChain.Services.Impl',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.Archethic.OracleChain.Services.UCOPrice.Providers.CoinMarketCap',
                 brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.OracleChain.Supervisor',supervisor},
    {update,'Elixir.Archethic.P2P.GeoPatch.GeoIP.MaxMindDB',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.GeoPatch',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.BootstrappingNodes',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.EncryptedStorageNonce',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.Error',brutal_purge,soft_purge,
                 []},
    {load_module,'Elixir.Archethic.P2P.Message.NodeList',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.NotFound',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.Ok',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.P2PView',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.Ping',brutal_purge,soft_purge,
                 []},
    {load_module,'Elixir.Archethic.P2P.Message.TransactionChainLength',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.TransactionInputList',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.UnspentOutputList',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.PubSub',brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Replication.TransactionPool',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Reward.MemTables.RewardTokens',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SelfRepair.Supervisor',supervisor},
    {update,'Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Telemetry',supervisor},
    {update,'Elixir.Archethic.TransactionChain.MemTables.KOLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.TransactionChain.MemTables.PendingLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.JobCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.JobConductor',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.PortHandler',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.Regression.Benchmark.SeedHolder',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicCache.LRU',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.AEWebRouter',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.API.WebHostingController.DirectoryListing',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.DirListingView',brutal_purge,soft_purge,
                 []},
    {update,'Elixir.ArchethicWeb.ExplorerLive.TopTransactionsCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.ExplorerRouter.Helpers',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.GraphQLSchema.BeaconChainSummary',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.GraphQLSchema.Compiled',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.Pagination',brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicWeb.Supervisor',supervisor},
    {update,'Elixir.ArchethicWeb.TransactionCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Mix.Tasks.Archethic.Regression',brutal_purge,
                 soft_purge,[]},
    {update,'Elixir.Archethic.Account.MemTables.TokenLedger',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB']},
    {update,'Elixir.Archethic.Account.MemTables.UCOLedger',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB']},
    {load_module,'Elixir.Archethic.Contracts.ContractConstants',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Contracts.TransactionLookup',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB']},
    {update,'Elixir.Archethic.Crypto.Ed25519.LibSodiumPort',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils.PortHandler']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.Origin.TPMImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils.PortHandler']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.P2PView',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.OracleChain.Services.UCOPrice',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.OracleChain.Services',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto']},
    {update,'Elixir.Archethic.P2P.Listener',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.PubSub']},
    {load_module,'Elixir.Archethic.P2P.Message.Balance',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.BeaconSummaryList',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain.Summary']},
    {load_module,'Elixir.Archethic.P2P.Message.BeaconUpdate',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.FirstPublicKey',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GenesisAddress',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBalance',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBeaconSummariesAggregate',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBootstrappingNodes',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.P2P.Message.GetUnspentOutputs',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.LastTransactionAddress',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ListNodes',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.P2P.Message.TransactionList',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction']},
    {load_module,'Elixir.Archethic.P2P.Message.TransactionSummaryList',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.SelfRepair.RepairWorker',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.SelfRepair']},
    {load_module,'Elixir.ArchethicWeb.API.WebHostingController.Resources',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic']},
    {load_module,'Elixir.ArchethicWeb.CodeView',brutal_purge,soft_purge,
                 ['Elixir.ArchethicWeb.ExplorerRouter.Helpers']},
    {load_module,'Elixir.ArchethicWeb.Endpoint',brutal_purge,soft_purge,
                 ['Elixir.Archethic']},
    {update,'Elixir.ArchethicWeb.FaucetRateLimiter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic']},
    {load_module,'Elixir.ArchethicWeb.LayoutView',brutal_purge,soft_purge,
                 ['Elixir.ArchethicWeb.ExplorerRouter.Helpers']},
    {load_module,'Elixir.ArchethicWeb.UserSocket',brutal_purge,soft_purge,
                 ['Elixir.Archethic']},
    {load_module,'Elixir.Archethic.BeaconChain.SummaryAggregate',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain.ReplicationAttestation',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.SummaryTimer',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.PubSub','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.Update',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.InputsWriter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB.EmbeddedImpl','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Governance.Pools.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Governance.Pools.MemTable',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.Metrics.Poller',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.P2P.MemTable',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.PubSub']},
    {load_module,'Elixir.Archethic.P2P.Message.AcknowledgeStorage',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Mining','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.AddMiningContext',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Mining','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.CrossValidate',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Mining','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.CrossValidationDone',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Mining','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBeaconSummaries',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBeaconSummary',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetCurrentSummaries',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.BeaconChain.Subset']},
    {load_module,'Elixir.Archethic.P2P.Message.GetFirstPublicKey',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetGenesisAddress',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetLastTransaction',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetLastTransactionAddress',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetNextAddresses',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetP2PView',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.P2P','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetStorageNonce',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransaction',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransactionChain',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransactionChainLength',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransactionInputs',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransactionSummary',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.NotifyEndOfNodeSync',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.NotifyPreviousChain',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Replication','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.NotifyReplicationValidation',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Mining','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.RegisterBeaconUpdates',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicationError',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Mining','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ValidateTransaction',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain.Transaction']},
    {load_module,'Elixir.Archethic.P2P.Message.ValidationError',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils',
                  'Elixir.ArchethicWeb.TransactionSubscriber']},
    {load_module,'Elixir.Archethic.TransactionChain.Transaction',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.BeaconChain.Slot',brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P',
                  'Elixir.Archethic.TransactionChain.TransactionSummary',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.NewTransaction',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.TransactionChain.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Contracts.Contract','Elixir.Archethic.DB',
             'Elixir.Archethic.TransactionChain.MemTables.PendingLedger']},
    {load_module,'Elixir.Archethic.BeaconChain.ReplicationAttestation',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.Election.HypergeometricDistribution',
                  'Elixir.Archethic.P2P',
                  'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {load_module,'Elixir.Archethic.BeaconChain.Summary',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain.ReplicationAttestation',
                  'Elixir.Archethic.BeaconChain.SlotTimer',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Bootstrap.NetworkConstraints',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.OracleChain','Elixir.Archethic.Reward',
                  'Elixir.Archethic.SharedSecrets']},
    {load_module,'Elixir.Archethic.Bootstrap.TransactionHandler',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.OracleChain.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.OracleChain',
             'Elixir.Archethic.OracleChain.MemTable',
             'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.TransactionChain.TransactionSummary',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P','Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Account.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Account.MemTables.TokenLedger',
             'Elixir.Archethic.Account.MemTables.UCOLedger',
             'Elixir.Archethic.Crypto','Elixir.Archethic.Reward',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.P2P.BootstrappingSeeds',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.DB',
             'Elixir.Archethic.P2P','Elixir.Archethic.P2P.GeoPatch',
             'Elixir.Archethic.PubSub']},
    {update,'Elixir.Archethic.P2P.Client.Connection',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P.MemTable',
             'Elixir.Archethic.P2P.Message',
             'Elixir.Archethic.P2P.MessageEnvelop','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Client.DefaultImpl',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain.Update',
                  'Elixir.Archethic.Crypto',
                  'Elixir.Archethic.P2P.Client.Connection',
                  'Elixir.Archethic.P2P.Message']},
    {load_module,'Elixir.Archethic.P2P.Message.NewBeaconSlot',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.BeaconChain.Slot',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.SlotTimer',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.BeaconChain',
             'Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Crypto','Elixir.Archethic.DB',
             'Elixir.Archethic.P2P','Elixir.Archethic.PubSub',
             'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain',
             'Elixir.Archethic.BeaconChain.Slot',
             'Elixir.Archethic.BeaconChain.SlotTimer',
             'Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.PubSub','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Application',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.OracleChain','Elixir.Archethic.Reward',
                  'Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.SharedSecrets','Elixir.Archethic.Utils',
                  'Elixir.ArchethicWeb.Endpoint',
                  'Elixir.Mix.Tasks.Archethic.Migrate']},
    {load_module,'Elixir.Archethic.Bootstrap.NetworkInit',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Bootstrap','Elixir.Archethic.Crypto',
                  'Elixir.Archethic.Mining','Elixir.Archethic.PubSub',
                  'Elixir.Archethic.Replication','Elixir.Archethic.Reward',
                  'Elixir.Archethic.SharedSecrets',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {load_module,'Elixir.Archethic.TransactionChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.DB',
                  'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.TransactionChain.MemTables.KOLedger',
                  'Elixir.Archethic.TransactionChain.MemTables.PendingLedger',
                  'Elixir.Archethic.TransactionChain.MemTablesLoader',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {update,'Elixir.Archethic.Reward.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Reward.MemTables.RewardTokens',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.Utils.DetectNodeResponsiveness',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Mining','Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.Utils.Regression.Playbook',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.TransactionChain.Transaction']},
    {load_module,'Elixir.ArchethicWeb.CodeProposalDetailsLive',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.PubSub']},
    {update,'Elixir.ArchethicWeb.TransactionSubscriber',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P','Elixir.Archethic.PubSub']},
    {load_module,'Elixir.Mix.Tasks.Archethic.Migrate',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB.EmbeddedImpl',
                  'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter']},
    {load_module,'Elixir.Archethic.Replication.TransactionContext',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P','Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction']},
    {load_module,'Elixir.Archethic.Utils',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain.ReplicationAttestation',
                  'Elixir.Archethic.Crypto',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {load_module,'Elixir.Archethic.P2P.Message.NotifyLastTransactionAddress',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts','Elixir.Archethic.P2P',
                  'Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicatePendingTransactionChain',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain.TransactionSummary',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.OracleChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.OracleChain.MemTable',
                  'Elixir.Archethic.OracleChain.MemTableLoader',
                  'Elixir.Archethic.OracleChain.Scheduler',
                  'Elixir.Archethic.OracleChain.Services',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.GraphQLSchema.Resolver',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.BeaconChain.SummaryAggregate',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.Mining',
                  'Elixir.Archethic.P2P','Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.GraphQLSchema',brutal_purge,soft_purge,
                 ['Elixir.Archethic.OracleChain',
                  'Elixir.ArchethicWeb.GraphQLSchema.Resolver']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicateTransaction',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.P2P.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.DB',
             'Elixir.Archethic.P2P','Elixir.Archethic.P2P.GeoPatch',
             'Elixir.Archethic.P2P.MemTable','Elixir.Archethic.SelfRepair',
             'Elixir.Archethic.SharedSecrets',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.Reward.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.DB','Elixir.Archethic.P2P',
             'Elixir.Archethic.PubSub','Elixir.Archethic.Reward',
             'Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {load_module,'Elixir.Archethic.Replication.TransactionValidator',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Bootstrap','Elixir.Archethic.Contracts',
                  'Elixir.Archethic.DB','Elixir.Archethic.Mining',
                  'Elixir.Archethic.OracleChain','Elixir.Archethic.P2P',
                  'Elixir.Archethic.SharedSecrets',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction']},
    {update,'Elixir.Archethic.BeaconChain.Subset',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain',
             'Elixir.Archethic.BeaconChain.Slot',
             'Elixir.Archethic.BeaconChain.SlotTimer',
             'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
             'Elixir.Archethic.BeaconChain.Summary',
             'Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
             'Elixir.Archethic.PubSub','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.BeaconChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain.SlotTimer',
                  'Elixir.Archethic.BeaconChain.Subset',
                  'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
                  'Elixir.Archethic.BeaconChain.SummaryAggregate',
                  'Elixir.Archethic.BeaconChain.SummaryTimer',
                  'Elixir.Archethic.BeaconChain.Update',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.DB',
                  'Elixir.Archethic.P2P','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Bootstrap.Sync',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.Bootstrap.NetworkInit',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.SharedSecrets',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.Bootstrap',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Bootstrap.NetworkConstraints',
                  'Elixir.Archethic.Bootstrap.Sync',
                  'Elixir.Archethic.Bootstrap.TransactionHandler',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.PubSub','Elixir.Archethic.Replication',
                  'Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.DB.EmbeddedImpl',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB.EmbeddedImpl.BootstrapInfo',
                  'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
                  'Elixir.Archethic.DB.EmbeddedImpl.ChainReader',
                  'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
                  'Elixir.Archethic.DB.EmbeddedImpl.InputsWriter',
                  'Elixir.Archethic.DB.EmbeddedImpl.P2PView',
                  'Elixir.Archethic.DB.EmbeddedImpl.StatsInfo',
                  'Elixir.Archethic.DB.EmbeddedImpl.Supervisor',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.DB',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB.EmbeddedImpl']},
    {load_module,'Elixir.Archethic.Governance.Code.CICD',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Governance.Code.CICD.Docker']},
    {load_module,'Elixir.Archethic.Contracts.Contract',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Contracts.ContractConstants']},
    {load_module,'Elixir.Archethic.Crypto',brutal_purge,soft_purge,
                 ['Elixir.Archethic.SharedSecrets',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.Origin.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Election.HypergeometricDistribution',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P','Elixir.Archethic.PubSub']},
    {update,'Elixir.Archethic.Crypto.SharedSecretsKeystore.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.DB',
             'Elixir.Archethic.SharedSecrets',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto',
             'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.ArchethicCache.LRU']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain.Summary',
             'Elixir.Archethic.BeaconChain.SummaryAggregate',
             'Elixir.Archethic.Crypto',
             'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.DB.EmbeddedImpl.ChainReader',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain.Summary',
                  'Elixir.Archethic.BeaconChain.SummaryAggregate',
                  'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
                  'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.OracleChain.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.OracleChain',
             'Elixir.Archethic.OracleChain.Services','Elixir.Archethic.P2P',
             'Elixir.Archethic.PubSub','Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {load_module,'Elixir.Archethic.Reward',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.OracleChain',
                  'Elixir.Archethic.P2P',
                  'Elixir.Archethic.Reward.MemTables.RewardTokens',
                  'Elixir.Archethic.Reward.MemTablesLoader',
                  'Elixir.Archethic.Reward.Scheduler',
                  'Elixir.Archethic.SharedSecrets',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Contracts.Worker',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic',
             'Elixir.Archethic.Contracts.ContractConstants',
             'Elixir.Archethic.Contracts.Interpreter',
             'Elixir.Archethic.Crypto','Elixir.Archethic.Mining',
             'Elixir.Archethic.OracleChain','Elixir.Archethic.P2P',
             'Elixir.Archethic.PubSub','Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {load_module,'Elixir.Archethic.Contracts',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter',
                  'Elixir.Archethic.Contracts.Loader',
                  'Elixir.Archethic.Contracts.TransactionLookup',
                  'Elixir.Archethic.Contracts.Worker']},
    {load_module,'Elixir.Archethic.Governance.Code',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.Governance.Code.CICD',
                  'Elixir.Archethic.P2P','Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Mining.PendingTransactionValidation',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts','Elixir.Archethic.Crypto',
                  'Elixir.Archethic.DB','Elixir.Archethic.OracleChain',
                  'Elixir.Archethic.P2P','Elixir.Archethic.Reward',
                  'Elixir.Archethic.SharedSecrets',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain.Summary',
                  'Elixir.Archethic.BeaconChain.SummaryAggregate',
                  'Elixir.Archethic.P2P.Message.AcknowledgeStorage',
                  'Elixir.Archethic.P2P.Message.AddMiningContext',
                  'Elixir.Archethic.P2P.Message.Balance',
                  'Elixir.Archethic.P2P.Message.BeaconSummaryList',
                  'Elixir.Archethic.P2P.Message.BeaconUpdate',
                  'Elixir.Archethic.P2P.Message.BootstrappingNodes',
                  'Elixir.Archethic.P2P.Message.CrossValidate',
                  'Elixir.Archethic.P2P.Message.CrossValidationDone',
                  'Elixir.Archethic.P2P.Message.EncryptedStorageNonce',
                  'Elixir.Archethic.P2P.Message.Error',
                  'Elixir.Archethic.P2P.Message.FirstPublicKey',
                  'Elixir.Archethic.P2P.Message.GenesisAddress',
                  'Elixir.Archethic.P2P.Message.GetBalance',
                  'Elixir.Archethic.P2P.Message.GetBeaconSummaries',
                  'Elixir.Archethic.P2P.Message.GetBeaconSummariesAggregate',
                  'Elixir.Archethic.P2P.Message.GetBeaconSummary',
                  'Elixir.Archethic.P2P.Message.GetBootstrappingNodes',
                  'Elixir.Archethic.P2P.Message.GetCurrentSummaries',
                  'Elixir.Archethic.P2P.Message.GetFirstPublicKey',
                  'Elixir.Archethic.P2P.Message.GetGenesisAddress',
                  'Elixir.Archethic.P2P.Message.GetLastTransaction',
                  'Elixir.Archethic.P2P.Message.GetLastTransactionAddress',
                  'Elixir.Archethic.P2P.Message.GetNextAddresses',
                  'Elixir.Archethic.P2P.Message.GetP2PView',
                  'Elixir.Archethic.P2P.Message.GetStorageNonce',
                  'Elixir.Archethic.P2P.Message.GetTransaction',
                  'Elixir.Archethic.P2P.Message.GetTransactionChain',
                  'Elixir.Archethic.P2P.Message.GetTransactionChainLength',
                  'Elixir.Archethic.P2P.Message.GetTransactionInputs',
                  'Elixir.Archethic.P2P.Message.GetTransactionSummary',
                  'Elixir.Archethic.P2P.Message.GetUnspentOutputs',
                  'Elixir.Archethic.P2P.Message.LastTransactionAddress',
                  'Elixir.Archethic.P2P.Message.ListNodes',
                  'Elixir.Archethic.P2P.Message.NewBeaconSlot',
                  'Elixir.Archethic.P2P.Message.NewTransaction',
                  'Elixir.Archethic.P2P.Message.NodeList',
                  'Elixir.Archethic.P2P.Message.NotFound',
                  'Elixir.Archethic.P2P.Message.NotifyEndOfNodeSync',
                  'Elixir.Archethic.P2P.Message.NotifyLastTransactionAddress',
                  'Elixir.Archethic.P2P.Message.NotifyPreviousChain',
                  'Elixir.Archethic.P2P.Message.NotifyReplicationValidation',
                  'Elixir.Archethic.P2P.Message.Ok',
                  'Elixir.Archethic.P2P.Message.P2PView',
                  'Elixir.Archethic.P2P.Message.Ping',
                  'Elixir.Archethic.P2P.Message.RegisterBeaconUpdates',
                  'Elixir.Archethic.P2P.Message.ReplicatePendingTransactionChain',
                  'Elixir.Archethic.P2P.Message.ReplicateTransaction',
                  'Elixir.Archethic.P2P.Message.ReplicationError',
                  'Elixir.Archethic.P2P.Message.ShardRepair',
                  'Elixir.Archethic.P2P.Message.StartMining',
                  'Elixir.Archethic.P2P.Message.TransactionChainLength',
                  'Elixir.Archethic.P2P.Message.TransactionInputList',
                  'Elixir.Archethic.P2P.Message.TransactionList',
                  'Elixir.Archethic.P2P.Message.TransactionSummaryList',
                  'Elixir.Archethic.P2P.Message.UnspentOutputList',
                  'Elixir.Archethic.P2P.Message.ValidateTransaction',
                  'Elixir.Archethic.P2P.Message.ValidationError',
                  'Elixir.Archethic.TransactionChain.Transaction']},
    {load_module,'Elixir.Archethic.P2P.MessageEnvelop',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.API.TransactionController',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Mining',
                  'Elixir.Archethic.OracleChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.ArchethicWeb.TransactionSubscriber']},
    {load_module,'Elixir.ArchethicWeb.API.OriginKeyController',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Crypto',
                  'Elixir.Archethic.SharedSecrets',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.ArchethicWeb.TransactionSubscriber']},
    {load_module,'Elixir.ArchethicWeb.FaucetController',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Crypto',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils',
                  'Elixir.ArchethicWeb.FaucetRateLimiter',
                  'Elixir.ArchethicWeb.TransactionSubscriber']},
    {load_module,'Elixir.ArchethicWeb.ExplorerRouter',brutal_purge,soft_purge,
                 ['Elixir.ArchethicWeb.API.OriginKeyController',
                  'Elixir.ArchethicWeb.API.TransactionController',
                  'Elixir.ArchethicWeb.FaucetController']},
    {load_module,'Elixir.Archethic.P2P.Message.ShardRepair',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.SelfRepair','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.StartMining',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.Mining',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.NodeSharedSecretsChainLive',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.PubSub','Elixir.Archethic.SharedSecrets',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.ArchethicWeb.ExplorerRouter.Helpers']},
    {load_module,'Elixir.ArchethicWeb.RewardChainLive',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.PubSub','Elixir.Archethic.Reward',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.ArchethicWeb.ExplorerRouter.Helpers']},
    {update,'Elixir.Archethic.SelfRepair.Notifier',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Crypto',
             'Elixir.Archethic.P2P','Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.Contracts.Interpreter',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.SharedSecrets',
                  'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.SelfRepair.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Bootstrap.Sync',
             'Elixir.Archethic.P2P','Elixir.Archethic.PubSub',
             'Elixir.Archethic.SelfRepair.Sync','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.P2P','Elixir.Archethic.PubSub',
             'Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.SharedSecrets.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.SharedSecrets',
             'Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
             'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
             'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler',
             'Elixir.Archethic.TransactionChain','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.SharedSecrets',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
                  'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
                  'Elixir.Archethic.SharedSecrets.MemTablesLoader',
                  'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.P2P.BootstrappingSeeds',
                  'Elixir.Archethic.P2P.GeoPatch',
                  'Elixir.Archethic.P2P.MemTable',
                  'Elixir.Archethic.P2P.MemTableLoader',
                  'Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.OracleChainLive',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.OracleChain',
                  'Elixir.Archethic.P2P','Elixir.Archethic.PubSub',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.ArchethicWeb.ExplorerRouter.Helpers']},
    {load_module,'Elixir.ArchethicWeb.BeaconChainLive',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.BeaconChain.SummaryAggregate',
                  'Elixir.Archethic.P2P','Elixir.Archethic.PubSub',
                  'Elixir.ArchethicWeb.ExplorerRouter.Helpers',
                  'Elixir.ArchethicWeb.TransactionCache']},
    {load_module,'Elixir.ArchethicWeb.SettingsLive',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Crypto',
                  'Elixir.Archethic.P2P','Elixir.Archethic.Reward',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.ArchethicWeb.TransactionSubscriber']},
    {update,'Elixir.Archethic.Mining.StandaloneWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Crypto',
             'Elixir.Archethic.Mining.PendingTransactionValidation',
             'Elixir.Archethic.Mining.ValidationContext',
             'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {load_module,'Elixir.Archethic.SelfRepair.Sync.TransactionHandler',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain.ReplicationAttestation',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.TransactionSummary',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Mining.DistributedWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Crypto',
             'Elixir.Archethic.Mining.PendingTransactionValidation',
             'Elixir.Archethic.Mining.ValidationContext',
             'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.TransactionChain.TransactionSummary',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Mining',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.Mining.DistributedWorkflow',
                  'Elixir.Archethic.Mining.PendingTransactionValidation',
                  'Elixir.Archethic.Mining.StandaloneWorkflow',
                  'Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.Contracts.Loader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Contracts',
             'Elixir.Archethic.Contracts.Contract',
             'Elixir.Archethic.Contracts.TransactionLookup',
             'Elixir.Archethic.Contracts.Worker',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction']},
    {load_module,'Elixir.Archethic.Mining.ValidationContext',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.BeaconChain.ReplicationAttestation',
                  'Elixir.Archethic.Contracts','Elixir.Archethic.Mining',
                  'Elixir.Archethic.OracleChain','Elixir.Archethic.P2P',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Networking.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.Networking.PortForwarding',
             'Elixir.Archethic.P2P','Elixir.Archethic.PubSub',
             'Elixir.Archethic.Replication',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.SelfRepair',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain','Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.SelfRepair.RepairWorker',
                  'Elixir.Archethic.SelfRepair.Scheduler',
                  'Elixir.Archethic.SelfRepair.Sync',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.SelfRepair.Sync',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.BeaconChain',
                  'Elixir.Archethic.BeaconChain.SummaryAggregate',
                  'Elixir.Archethic.Bootstrap.NetworkConstraints',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.DB',
                  'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.PubSub','Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.SelfRepair.Sync.TransactionHandler',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Replication',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.OracleChain',
                  'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.PubSub',
                  'Elixir.Archethic.Replication.TransactionContext',
                  'Elixir.Archethic.Replication.TransactionPool',
                  'Elixir.Archethic.Replication.TransactionValidator',
                  'Elixir.Archethic.Reward','Elixir.Archethic.SharedSecrets',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {add_module,'Elixir.Archethic.Contracts.ActionInterpreter'},
    {add_module,'Elixir.Archethic.Contracts.ConditionInterpreter'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.TransactionStatements'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Utils'},
    {add_module,'Elixir.Archethic.P2P.Message.ReplicateTransactionChain'}]}]}.


