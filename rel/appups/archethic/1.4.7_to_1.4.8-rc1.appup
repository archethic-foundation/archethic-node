{"1.4.8-rc1",
 [{"1.4.7",
   [{add_module,'Elixir.Archethic.SelfRepair.Error'},
    {add_module,'Elixir.Archethic.UTXO.DBLedger.FileImpl.Supervisor'},
    {add_module,'Elixir.Archethic.UTXO.DBLedger.FileImpl'},
    {add_module,'Elixir.Archethic.UTXO.DBLedger.Supervisor'},
    {add_module,'Elixir.Archethic.UTXO.DBLedger'},
    {add_module,'Elixir.Archethic.UTXO.Loader'},
    {add_module,'Elixir.Archethic.UTXO.MemoryLedger'},
    {add_module,'Elixir.Archethic.UTXO.Supervisor'},
    {add_module,'Elixir.Archethic.UTXO'},
    {add_module,'Elixir.ArchethicWeb.Explorer.Components.UnspentOutputList'},
    {update,'Elixir.Archethic.Account.MemTables.StateLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Cldr.Currency',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Cldr.Number.Transliterate',brutal_purge,
                 soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.Supervisor',supervisor},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransactionInputs',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.GetUnspentOutputs',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.UnspentOutput',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.TransactionChain.TransactionInput',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.API.GraphQL.Schema.Compiled',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.API.GraphQL.Schema.TransactionType',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.Explorer.Components.Amount',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.ExplorerRouter',brutal_purge,soft_purge,
                 []},
    {update,'Elixir.Archethic.Contracts.TransactionLookup',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic']},
    {load_module,'Elixir.Archethic.DB.EmbeddedImpl.Encoding',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.UnspentOutput']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.InputsWriter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB.EmbeddedImpl']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicatePendingTransactionChain',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {load_module,'Elixir.Archethic.DB.EmbeddedImpl',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
                  'Elixir.Archethic.DB.EmbeddedImpl.InputsWriter',
                  'Elixir.Archethic.DB.EmbeddedImpl.Supervisor']},
    {load_module,'Elixir.Archethic.DB',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB.EmbeddedImpl']},
    {update,'Elixir.Archethic.Account.MemTables.TokenLedger',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB']},
    {update,'Elixir.Archethic.Account.MemTables.UCOLedger',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB']},
    {load_module,'Elixir.Archethic.P2P.Message.ShardRepair',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.SelfRepair']},
    {load_module,'Elixir.Archethic.P2P.Message.TransactionSummaryMessage',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain.TransactionSummary']},
    {update,'Elixir.Archethic.SelfRepair.RepairWorker',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.SelfRepair']},
    {load_module,'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.UnspentOutput']},
    {load_module,'Elixir.Archethic.Election',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations']},
    {load_module,'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations']},
    {load_module,'Elixir.ArchethicWeb.Explorer.TransactionDetailsLive',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic']},
    {load_module,'Elixir.Mix.Tasks.Archethic.Migrate',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB.EmbeddedImpl']},
    {load_module,'Elixir.Archethic.Application',brutal_purge,soft_purge,
                 ['Elixir.Archethic.SelfRepair',
                  'Elixir.Mix.Tasks.Archethic.Migrate']},
    {load_module,'Elixir.Archethic.Replication.TransactionContext',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.SelfRepair.Notifier',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Election','Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.BeaconChain.Subset',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain.Subset.SummaryCache',
             'Elixir.Archethic.Election',
             'Elixir.Archethic.P2P.Message.TransactionSummaryMessage']},
    {load_module,'Elixir.Archethic.Mining.PendingTransactionValidation',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB','Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.Mining',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election',
                  'Elixir.Archethic.Mining.DistributedWorkflow',
                  'Elixir.Archethic.Mining.StandaloneWorkflow']},
    {load_module,'Elixir.Archethic.SelfRepair.NetworkChain',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Election','Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.TransactionChain.TransactionSummary',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations']},
    {load_module,'Elixir.Archethic.TransactionChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB','Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicateTransaction',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election','Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.Account.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Account.MemTables.StateLedger',
             'Elixir.Archethic.Account.MemTables.TokenLedger',
             'Elixir.Archethic.Account.MemTables.UCOLedger',
             'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election','Elixir.Archethic.Mining',
                  'Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.SelfRepair.NetworkChain',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.Replication.TransactionValidator',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Bootstrap','Elixir.Archethic.DB',
                  'Elixir.Archethic.Election','Elixir.Archethic.Mining',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations']},
    {load_module,'Elixir.Archethic.Replication',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Election',
                  'Elixir.Archethic.Replication.TransactionContext',
                  'Elixir.Archethic.Replication.TransactionValidator',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.Bootstrap',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Replication',
                  'Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.SelfRepair.NetworkChain',
                  'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.Networking.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Replication',
             'Elixir.Archethic.SelfRepair.NetworkChain',
             'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.SelfRepair.Sync.TransactionHandler',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election','Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {load_module,'Elixir.Archethic.Mining.ValidationContext',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Election','Elixir.Archethic.Mining',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations']},
    {update,'Elixir.Archethic.Mining.DistributedWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Election',
             'Elixir.Archethic.Mining.PendingTransactionValidation',
             'Elixir.Archethic.Mining.ValidationContext',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {update,'Elixir.Archethic.Mining.StandaloneWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Election',
             'Elixir.Archethic.Mining.PendingTransactionValidation',
             'Elixir.Archethic.Mining.ValidationContext',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {load_module,'Elixir.Archethic.SelfRepair',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election','Elixir.Archethic.Replication',
                  'Elixir.Archethic.SelfRepair.RepairWorker',
                  'Elixir.Archethic.SelfRepair.Sync',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.Bootstrap.NetworkInit',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Bootstrap','Elixir.Archethic.Election',
                  'Elixir.Archethic.Mining','Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {load_module,'Elixir.Archethic.SelfRepair.Sync',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.DB',
                  'Elixir.Archethic.Election','Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.SelfRepair.Sync.TransactionHandler',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {apply,{supervisor,terminate_child,
                       ['Elixir.Archethic.Telemetry',prometheus_metrics]}},
    {apply,{supervisor,restart_child,
                       ['Elixir.Archethic.Telemetry',prometheus_metrics]}},
    {apply,{supervisor,start_child,
                       ['Elixir.Archethic.Supervisor', #{
                                id => 'Elixir.Archethic.UTXO.Supervisor',
                                start => {'Elixir.Archethic.UTXO.Supervisor', start_link, [[]]},
                                type => supervisor
                            }
                       ]}},
    {apply,{'Elixir.Mix.Tasks.Archethic.Migrate',run,["1.4.8-rc1",true]}}]}],
 [{"1.4.7",
   [{delete_module,'Elixir.Archethic.SelfRepair.Error'},
    {delete_module,'Elixir.Archethic.UTXO.DBLedger.FileImpl.Supervisor'},
    {delete_module,'Elixir.Archethic.UTXO.DBLedger.FileImpl'},
    {delete_module,'Elixir.Archethic.UTXO.DBLedger.Supervisor'},
    {delete_module,'Elixir.Archethic.UTXO.DBLedger'},
    {delete_module,'Elixir.Archethic.UTXO.Loader'},
    {delete_module,'Elixir.Archethic.UTXO.MemoryLedger'},
    {delete_module,'Elixir.Archethic.UTXO.Supervisor'},
    {delete_module,'Elixir.Archethic.UTXO'},
    {delete_module,'Elixir.ArchethicWeb.Explorer.Components.UnspentOutputList'},
    {update,'Elixir.Archethic.Account.MemTables.StateLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Cldr.Currency',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Cldr.Number.Transliterate',brutal_purge,
                 soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.Supervisor',supervisor},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransactionInputs',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.GetUnspentOutputs',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.UnspentOutput',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.TransactionChain.TransactionInput',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.API.GraphQL.Schema.Compiled',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.API.GraphQL.Schema.TransactionType',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.Explorer.Components.Amount',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.ExplorerRouter',brutal_purge,soft_purge,
                 []},
    {update,'Elixir.Archethic.Contracts.TransactionLookup',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic']},
    {load_module,'Elixir.Archethic.DB.EmbeddedImpl.Encoding',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.UnspentOutput']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.InputsWriter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB.EmbeddedImpl']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicatePendingTransactionChain',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {load_module,'Elixir.Archethic.DB.EmbeddedImpl',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
                  'Elixir.Archethic.DB.EmbeddedImpl.InputsWriter',
                  'Elixir.Archethic.DB.EmbeddedImpl.Supervisor']},
    {load_module,'Elixir.Archethic.DB',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB.EmbeddedImpl']},
    {update,'Elixir.Archethic.Account.MemTables.TokenLedger',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB']},
    {update,'Elixir.Archethic.Account.MemTables.UCOLedger',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.DB']},
    {load_module,'Elixir.Archethic.P2P.Message.ShardRepair',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.SelfRepair']},
    {load_module,'Elixir.Archethic.P2P.Message.TransactionSummaryMessage',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain.TransactionSummary']},
    {update,'Elixir.Archethic.SelfRepair.RepairWorker',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.SelfRepair']},
    {load_module,'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations.UnspentOutput']},
    {load_module,'Elixir.Archethic.Election',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations']},
    {load_module,'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations']},
    {load_module,'Elixir.ArchethicWeb.Explorer.TransactionDetailsLive',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic']},
    {load_module,'Elixir.Mix.Tasks.Archethic.Migrate',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB.EmbeddedImpl']},
    {load_module,'Elixir.Archethic.Application',brutal_purge,soft_purge,
                 ['Elixir.Archethic.SelfRepair',
                  'Elixir.Mix.Tasks.Archethic.Migrate']},
    {load_module,'Elixir.Archethic.Replication.TransactionContext',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.SelfRepair.Notifier',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Election','Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.BeaconChain.Subset',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain.Subset.SummaryCache',
             'Elixir.Archethic.Election',
             'Elixir.Archethic.P2P.Message.TransactionSummaryMessage']},
    {load_module,'Elixir.Archethic.Mining.PendingTransactionValidation',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB','Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.Mining',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election',
                  'Elixir.Archethic.Mining.DistributedWorkflow',
                  'Elixir.Archethic.Mining.StandaloneWorkflow']},
    {load_module,'Elixir.Archethic.SelfRepair.NetworkChain',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Election','Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.TransactionChain.TransactionSummary',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations']},
    {load_module,'Elixir.Archethic.TransactionChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB','Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicateTransaction',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election','Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.Account.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Account.MemTables.StateLedger',
             'Elixir.Archethic.Account.MemTables.TokenLedger',
             'Elixir.Archethic.Account.MemTables.UCOLedger',
             'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election','Elixir.Archethic.Mining',
                  'Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.SelfRepair.NetworkChain',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.Replication.TransactionValidator',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Bootstrap','Elixir.Archethic.DB',
                  'Elixir.Archethic.Election','Elixir.Archethic.Mining',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations']},
    {load_module,'Elixir.Archethic.Replication',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Election',
                  'Elixir.Archethic.Replication.TransactionContext',
                  'Elixir.Archethic.Replication.TransactionValidator',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.Bootstrap',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Replication',
                  'Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.SelfRepair.NetworkChain',
                  'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.Networking.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Replication',
             'Elixir.Archethic.SelfRepair.NetworkChain',
             'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.SelfRepair.Sync.TransactionHandler',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election','Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {load_module,'Elixir.Archethic.Mining.ValidationContext',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Election','Elixir.Archethic.Mining',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations']},
    {update,'Elixir.Archethic.Mining.DistributedWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Election',
             'Elixir.Archethic.Mining.PendingTransactionValidation',
             'Elixir.Archethic.Mining.ValidationContext',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {update,'Elixir.Archethic.Mining.StandaloneWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Election',
             'Elixir.Archethic.Mining.PendingTransactionValidation',
             'Elixir.Archethic.Mining.ValidationContext',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {load_module,'Elixir.Archethic.SelfRepair',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election','Elixir.Archethic.Replication',
                  'Elixir.Archethic.SelfRepair.RepairWorker',
                  'Elixir.Archethic.SelfRepair.Sync',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.Bootstrap.NetworkInit',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Bootstrap','Elixir.Archethic.Election',
                  'Elixir.Archethic.Mining','Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.TransactionChain.TransactionSummary']},
    {load_module,'Elixir.Archethic.SelfRepair.Sync',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.DB',
                  'Elixir.Archethic.Election','Elixir.Archethic.SelfRepair',
                  'Elixir.Archethic.SelfRepair.Sync.TransactionHandler',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.TransactionSummary']}]}]}.
